"use strict";
/**
 * TestOps Configuration Validator
 * Ensures SDK only communicates with authorized TestOps instances
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateTestOpsConfig = validateTestOpsConfig;
exports.sanitizeConfigForLogging = sanitizeConfigForLogging;
/**
 * Validate that configuration points to a TestOps instance
 */
function validateTestOpsConfig(config) {
    // Check for required TestOps configuration
    if (!config.publicKey || !config.secretKey || !config.baseUrl) {
        throw new Error('TestOps configuration incomplete! Required:\n' +
            '- publicKey (TESTOPS_PUBLIC_KEY)\n' +
            '- secretKey (TESTOPS_SECRET_KEY)\n' +
            '- baseUrl (TESTOPS_BASE_URL)\n' +
            'This SDK only works with TestOps applications.');
    }
    // Validate public key format (TestOps specific)
    if (!config.publicKey.startsWith('pk-to-')) {
        throw new Error(`Invalid TestOps public key format: ${config.publicKey}\n` +
            'TestOps public keys start with "pk-to-"');
    }
    // Validate secret key format (TestOps specific)
    if (!config.secretKey.startsWith('sk-to-')) {
        throw new Error(`Invalid TestOps secret key format: ${config.secretKey}\n` +
            'TestOps secret keys start with "sk-to-"');
    }
    // Validate baseUrl points to authorized TestOps instances
    const authorizedDomains = [
        'testops.ai',
        'bsstag.com',
        'browserstack.com',
        'localhost',
        '127.0.0.1',
        '0.0.0.0'
    ];
    const isAuthorized = authorizedDomains.some(domain => config.baseUrl.includes(domain));
    if (!isAuthorized) {
        throw new Error(`Unauthorized TestOps baseUrl: ${config.baseUrl}\n` +
            'This SDK only communicates with authorized TestOps instances:\n' +
            `- *.bsstag.com (TestOps staging)\n` +
            `- *.browserstack.com (TestOps production)\n` +
            `- localhost/127.0.0.1 (Local development)\n` +
            'Contact your TestOps administrator for correct configuration.');
    }
    return true;
}
/**
 * Sanitize configuration for logging (hide sensitive data)
 */
function sanitizeConfigForLogging(config) {
    const sanitized = { ...config };
    if (sanitized.publicKey) {
        sanitized.publicKey = sanitized.publicKey.substring(0, 8) + '***';
    }
    if (sanitized.secretKey) {
        sanitized.secretKey = sanitized.secretKey.substring(0, 8) + '***';
    }
    return sanitized;
}
//# sourceMappingURL=config-validator.js.map