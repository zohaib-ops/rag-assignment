/**
 * Structured exception hierarchy for TestOps SDK.
 *
 * This module provides comprehensive error handling for the TestOps NodeJS SDK,
 * mirroring the Python SDK's error structure for consistent behavior across platforms.
 */
/**
 * Base error class for all TestOps SDK errors.
 * Extends the native Error class with additional context.
 */
export declare class TestOpsError extends Error {
    code: string;
    readonly context?: Record<string, any>;
    constructor(message: string, code?: string, context?: Record<string, any>);
    /**
     * Convert error to a structured object for logging/debugging
     */
    toJSON(): {
        name: string;
        message: string;
        code: string;
        context: Record<string, any> | undefined;
        stack: string | undefined;
    };
}
/**
 * Configuration and initialization errors
 */
export declare class TestOpsConfigError extends TestOpsError {
    constructor(message: string, context?: Record<string, any>);
}
/**
 * Input validation errors
 */
export declare class TestOpsValidationError extends TestOpsError {
    readonly field?: string;
    readonly value?: any;
    constructor(message: string, field?: string, value?: any, context?: Record<string, any>);
}
/**
 * HTTP API errors with status code information
 */
export declare class TestOpsApiError extends TestOpsError {
    readonly statusCode: number;
    readonly statusText: string;
    readonly response?: any;
    constructor(message: string, statusCode: number, statusText?: string, response?: any, context?: Record<string, any>);
    /**
     * Check if error is a client error (4xx)
     */
    get isClientError(): boolean;
    /**
     * Check if error is a server error (5xx)
     */
    get isServerError(): boolean;
}
/**
 * Authentication and authorization errors
 */
export declare class TestOpsAuthError extends TestOpsApiError {
    constructor(message?: string, statusCode?: number, context?: Record<string, any>);
}
/**
 * Resource not found errors
 */
export declare class TestOpsNotFoundError extends TestOpsApiError {
    readonly resourceType?: string;
    readonly resourceId?: string;
    constructor(message: string, resourceType?: string, resourceId?: string, context?: Record<string, any>);
}
/**
 * Rate limiting errors
 */
export declare class TestOpsRateLimitError extends TestOpsApiError {
    readonly retryAfter?: number;
    constructor(message?: string, retryAfter?: number, context?: Record<string, any>);
}
/**
 * Network and connectivity errors
 */
export declare class TestOpsNetworkError extends TestOpsError {
    readonly originalError?: Error;
    constructor(message: string, originalError?: Error, context?: Record<string, any>);
}
/**
 * Timeout errors for operations that exceed time limits
 */
export declare class TestOpsTimeoutError extends TestOpsError {
    readonly timeoutMs: number;
    readonly operation?: string;
    constructor(message: string, timeoutMs: number, operation?: string, context?: Record<string, any>);
}
/**
 * Experiment-specific errors
 */
export declare class TestOpsExperimentError extends TestOpsError {
    readonly experimentId?: string;
    constructor(message: string, experimentId?: string, context?: Record<string, any>);
}
/**
 * Dataset-specific errors
 */
export declare class TestOpsDatasetError extends TestOpsError {
    readonly datasetName?: string;
    readonly datasetRunId?: string;
    constructor(message: string, datasetName?: string, datasetRunId?: string, context?: Record<string, any>);
}
/**
 * Utility functions for error handling
 */
export declare class ErrorUtils {
    /**
     * Create appropriate TestOps error from HTTP response
     */
    static fromHttpResponse(statusCode: number, statusText: string, message?: string, response?: any): TestOpsError;
    /**
     * Create validation error with field information
     */
    static validationError(field: string, value: any, message: string): TestOpsValidationError;
    /**
     * Create config error with context
     */
    static configError(message: string, config?: Record<string, any>): TestOpsConfigError;
    /**
     * Check if error is a TestOps error
     */
    static isTestOpsError(error: any): error is TestOpsError;
    /**
     * Check if error is retryable (network issues, 5xx errors)
     */
    static isRetryableError(error: any): boolean;
    /**
     * Extract error message safely from any error type
     */
    static extractMessage(error: any): string;
}
export { TestOpsError as BaseError, TestOpsValidationError as ValidationError, TestOpsApiError as ApiError, TestOpsAuthError as AuthError, TestOpsNotFoundError as NotFoundError, TestOpsRateLimitError as RateLimitError, TestOpsNetworkError as NetworkError, TestOpsTimeoutError as TimeoutError, TestOpsExperimentError as ExperimentError, TestOpsDatasetError as DatasetError };
//# sourceMappingURL=errors.d.ts.map