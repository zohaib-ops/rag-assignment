"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestOpsClient = exports.TestOps = exports.observeOpenAI = exports.TextPromptClient = exports.TestOpsWebClient = exports.TestOpsTraceClient = exports.TestOpsSpanClient = exports.TestOpsPublicApi = exports.TestOpsMediaBase = exports.TestOpsGenerationClient = exports.TestOpsEventClient = exports.ChatPromptClient = void 0;
// Maintain this before importing langfuse
['TESTOPS_PUBLIC_KEY', 'TESTOPS_SECRET_KEY'].forEach((key) => {
    if (typeof process.env[key] === 'string' && process.env[key].length > 0) {
        process.env[key.replace('TESTOPS_', 'LANGFUSE_')] = process.env[key];
    }
});
const DEFAULT_BASE_URL = process.env.TESTOPS_BASE_URL || 'https://www.testops.ai';
process.env.LANGFUSE_BASE_URL = DEFAULT_BASE_URL;
const langfuse_1 = require("langfuse");
const dataset_runs_1 = require("./dataset-runs");
const datasets_1 = require("./datasets");
const experiment_runs_1 = require("./experiment-runs");
const experiments_1 = require("./experiments");
// re-export all
var langfuse_2 = require("langfuse");
Object.defineProperty(exports, "ChatPromptClient", { enumerable: true, get: function () { return langfuse_2.ChatPromptClient; } });
Object.defineProperty(exports, "TestOpsEventClient", { enumerable: true, get: function () { return langfuse_2.LangfuseEventClient; } });
Object.defineProperty(exports, "TestOpsGenerationClient", { enumerable: true, get: function () { return langfuse_2.LangfuseGenerationClient; } });
Object.defineProperty(exports, "TestOpsMediaBase", { enumerable: true, get: function () { return langfuse_2.LangfuseMedia; } });
Object.defineProperty(exports, "TestOpsPublicApi", { enumerable: true, get: function () { return langfuse_2.LangfusePublicApi; } });
Object.defineProperty(exports, "TestOpsSpanClient", { enumerable: true, get: function () { return langfuse_2.LangfuseSpanClient; } });
Object.defineProperty(exports, "TestOpsTraceClient", { enumerable: true, get: function () { return langfuse_2.LangfuseTraceClient; } });
Object.defineProperty(exports, "TestOpsWebClient", { enumerable: true, get: function () { return langfuse_2.LangfuseWeb; } });
Object.defineProperty(exports, "TextPromptClient", { enumerable: true, get: function () { return langfuse_2.TextPromptClient; } });
const observeOpenAI = (sdk, config) => {
    return (0, langfuse_1.observeOpenAI)(sdk, {
        ...config,
        clientInitParams: {
            ...config?.clientInitParams,
            baseUrl: config?.baseUrl || config?.clientInitParams?.baseUrl || DEFAULT_BASE_URL,
        },
    });
};
exports.observeOpenAI = observeOpenAI;
/**
 * TestOps Client - Wraps Langfuse with minimal test-specific enhancements
 * Uses composition instead of inheritance to avoid shared state issues
 * Dynamically binds all Langfuse methods for complete API coverage
 */
class TestOps extends langfuse_1.Langfuse {
    constructor(config = {}) {
        // Build config for TestOps instance - ONLY use TestOps endpoints
        const baseUrl = config.baseUrl || process.env.TESTOPS_BASE_URL || DEFAULT_BASE_URL;
        const enabled = typeof config.enabled === 'boolean' ? config.enabled : true;
        const finalConfig = config.writeOnlyKey
            ? {
                ...config,
                publicKey: config.writeOnlyKey,
                // prevents "Langfuse secret key was not passed to constructor or not set as 'LANGFUSE_SECRET_KEY' environment variable. No observability data will be sent to Langfuse."
                enabled: false,
                baseUrl,
            }
            : {
                ...config,
                publicKey: config.publicKey || process.env.TESTOPS_PUBLIC_KEY,
                secretKey: config.secretKey || process.env.TESTOPS_SECRET_KEY,
                baseUrl,
            };
        super(finalConfig);
        this.enabled = enabled;
        // Store credentials for TestOps API clients
        this._config = finalConfig;
    }
    /**
     * Access to experiment runs operations.
     * Lazy initialization matching Python SDK pattern.
     */
    get experimentRuns() {
        if (!this._experimentRuns) {
            if (!this._config?.baseUrl ||
                !this._config?.publicKey ||
                !this._config?.secretKey) {
                throw new Error('Experiment runs client not initialized. ' +
                    'Make sure you have provided valid credentials (publicKey and secretKey).');
            }
            // Initialize the experiment runs client
            const experimentRunsClient = new experiment_runs_1.ExperimentRunsClient(this._config.baseUrl, this._config.publicKey, this._config.secretKey);
            this._experimentRuns = new experiment_runs_1.ExperimentRuns(experimentRunsClient);
        }
        return this._experimentRuns;
    }
    /**
     * Set the experiment runs client.
     */
    set experimentRuns(value) {
        this._experimentRuns = value;
    }
    /**
     * Access to experiments operations.
     * Lazy initialization matching Python SDK pattern.
     */
    get experiments() {
        if (!this._experiments) {
            if (!this._config?.baseUrl ||
                !this._config?.publicKey ||
                !this._config?.secretKey) {
                throw new Error('Experiments client not initialized. ' +
                    'Make sure you have provided valid credentials (publicKey and secretKey).');
            }
            // Initialize the experiments client
            const experimentsClient = new experiments_1.ExperimentsClient(this._config.baseUrl, this._config.publicKey, this._config.secretKey);
            this._experiments = new experiments_1.Experiments(experimentsClient);
        }
        return this._experiments;
    }
    /**
     * Set the experiments client.
     */
    set experiments(value) {
        this._experiments = value;
    }
    /**
     * Access to dataset runs operations.
     * Lazy initialization matching Python SDK pattern.
     */
    get datasetRuns() {
        if (!this._datasetRuns) {
            if (!this._config?.baseUrl ||
                !this._config?.publicKey ||
                !this._config?.secretKey) {
                throw new Error('Dataset runs client not initialized. ' +
                    'Make sure you have provided valid credentials (publicKey and secretKey).');
            }
            // Initialize the dataset runs client
            const datasetRunsClient = new dataset_runs_1.DatasetRunsClient(this._config.baseUrl, this._config.publicKey, this._config.secretKey);
            this._datasetRuns = new dataset_runs_1.DatasetRuns(datasetRunsClient);
        }
        return this._datasetRuns;
    }
    /**
     * Set the dataset runs client.
     */
    set datasetRuns(value) {
        this._datasetRuns = value;
    }
    /**
     * Access to datasets operations.
     * Lazy initialization matching Python SDK pattern.
     */
    get datasets() {
        if (!this._datasets) {
            if (!this._config?.baseUrl ||
                !this._config?.publicKey ||
                !this._config?.secretKey) {
                throw new Error('Datasets client not initialized. ' +
                    'Make sure you have provided valid credentials (publicKey and secretKey).');
            }
            // Initialize the datasets client
            const datasetsClient = new datasets_1.DatasetsClient(this._config.baseUrl, this._config.publicKey, this._config.secretKey);
            this._datasets = new datasets_1.Datasets(datasetsClient);
        }
        return this._datasets;
    }
    /**
     * Set the datasets client.
     */
    set datasets(value) {
        this._datasets = value;
    }
}
exports.TestOps = TestOps;
exports.TestOpsClient = TestOps;
//# sourceMappingURL=client.js.map