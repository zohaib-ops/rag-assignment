/**
 * Dataset Runs API client for TestOps.
 *
 * This module provides CRUD operations for dataset runs and dataset run items through the TestOps API.
 * Mirrors the Python SDK's dataset_runs.py structure exactly.
 */
/**
 * Response type for dataset run operations
 */
export interface DatasetRunResponse {
    datasetName: string;
    id: string;
    name: string;
    description?: string;
    metadata?: Record<string, any>;
    datasetId: string;
    type: string;
    status: string;
    createdAt: string;
    updatedAt: string;
    tags?: Array<Record<string, any>>;
}
/**
 * Response type for listing dataset runs
 */
export interface ListDatasetRunsResponse {
    data: DatasetRunResponse[];
    meta: Record<string, any>;
}
/**
 * Response type for dataset run item operations
 */
export interface DatasetRunItemResponse {
    datasetRunName: string;
    id: string;
    datasetRunId: string;
    datasetItemId: string;
    traceId?: string;
    observationId?: string;
    createdAt: string;
    updatedAt: string;
}
/**
 * Response type for listing dataset run items
 */
export interface ListDatasetRunItemsResponse {
    data: DatasetRunItemResponse[];
    meta: Record<string, any>;
}
/**
 * Request type for creating dataset run items
 */
export interface CreateDatasetRunItemRequest {
    id?: string;
    input?: any;
    output?: any;
    expectedOutput?: any;
    metadata?: any;
    sourceTraceId?: string;
    sourceObservationId?: string;
    status?: string;
    traceId?: string;
    observationId?: string;
}
/**
 * Response type for creating dataset run items
 */
export interface CreateDatasetRunItemsResponse {
    success: boolean;
    itemCount: number;
}
/**
 * Response type for getting dataset run by tag
 */
export interface GetDatasetRunByTagResponse extends DatasetRunResponse {
}
/**
 * Response type for getting dataset run tags
 */
export interface GetDatasetRunTagsResponse {
    data: Array<Record<string, any>>;
    meta: Record<string, any>;
}
/**
 * Status constants for dataset runs
 */
export declare class DatasetRunStatus {
    static readonly OPEN = "OPEN";
    static readonly PENDING = "PENDING";
    static readonly COMPLETED = "COMPLETED";
}
/**
 * Type constants for dataset runs
 */
export declare class DatasetRunType {
    static readonly MUTABLE = "MUTABLE";
    static readonly IMMUTABLE = "IMMUTABLE";
}
/**
 * Client for managing dataset runs through the TestOps API.
 * This is a thin wrapper that provides dataset run functionality.
 * Mirrors the Python SDK's DatasetRunsClient structure exactly.
 */
export declare class DatasetRunsClient {
    private baseUrl;
    private publicKey;
    private secretKey;
    /**
     * Initialize the dataset runs client.
     *
     * @param baseUrl The base URL for the TestOps API
     * @param publicKey The public API key
     * @param secretKey The secret API key
     */
    constructor(baseUrl: string, publicKey: string, secretKey: string);
    /**
     * Generate authentication headers for requests.
     */
    private _getAuthHeaders;
    /**
     * Validate dataset name format.
     *
     * @param datasetName The dataset name to validate
     * @throws Error If the dataset name is invalid
     */
    private _validateDatasetName;
    /**
     * Validate dataset run ID format.
     *
     * @param datasetRunId The dataset run ID to validate
     * @throws Error If the dataset run ID is invalid
     */
    private _validateDatasetRunId;
    /**
     * Create a new dataset run.
     *
     * @param datasetName The name of the dataset to create a run for
     * @param name Optional name for the dataset run
     * @param description Optional description for the dataset run
     * @param metadata Optional metadata for the dataset run
     * @param tag Optional tag for the dataset run (only allowed for MUTABLE runs)
     * @returns DatasetRunResponse containing the created dataset run data
     * @throws Error If input validation fails or API request fails
     */
    create(datasetName: string, name?: string, description?: string, metadata?: string, tag?: string): Promise<DatasetRunResponse>;
    /**
     * List dataset runs for a dataset.
     *
     * @param datasetName The name of the dataset
     * @param page Page number for pagination (starts at 1)
     * @param limit Number of items per page
     * @param name Optional filter by run name
     * @param type Optional filter by run type ("IMMUTABLE" or "MUTABLE")
     * @returns ListDatasetRunsResponse containing dataset runs list and pagination info
     * @throws Error If input validation fails or API request fails
     */
    list(datasetName: string, page?: number, limit?: number, name?: string, type?: string): Promise<ListDatasetRunsResponse>;
    /**
     * List items in a dataset run.
     *
     * @param datasetName The name of the dataset
     * @param datasetRunId The ID of the dataset run
     * @param page Page number for pagination (starts at 1)
     * @param limit Number of items per page
     * @returns ListDatasetRunItemsResponse containing dataset run items list and pagination info
     * @throws Error If input validation fails or API request fails
     */
    listItems(datasetName: string, datasetRunId: string, page?: number, limit?: number): Promise<ListDatasetRunItemsResponse>;
    /**
     * Create/upload multiple items to a dataset run.
     *
     * @param datasetName The name of the dataset
     * @param datasetRunId The ID of the dataset run
     * @param items List of item objects, each containing item data
     * @returns CreateDatasetRunItemsResponse containing the bulk creation results
     * @throws Error If input validation fails or API request fails
     */
    createItems(datasetName: string, datasetRunId: string, items: CreateDatasetRunItemRequest[]): Promise<CreateDatasetRunItemsResponse>;
    /**
     * Get the most recent OPEN dataset run with the specified tag.
     *
     * @param datasetName The name of the dataset
     * @param tagName The tag name to search for
     * @returns GetDatasetRunByTagResponse containing the dataset run data
     * @throws Error If input validation fails or API request fails
     */
    getRunByTag(datasetName: string, tagName: string): Promise<GetDatasetRunByTagResponse>;
    /**
     * Get tags for a specific dataset run.
     *
     * @param datasetName The name of the dataset
     * @param datasetRunId The ID of the dataset run
     * @param page Page number for pagination (starts at 1)
     * @param limit Number of items per page
     * @returns GetDatasetRunTagsResponse containing dataset run tags list and pagination info
     * @throws Error If input validation fails or API request fails
     */
    getRunTags(datasetName: string, datasetRunId: string, page?: number, limit?: number): Promise<GetDatasetRunTagsResponse>;
}
/**
 * Convenience wrapper for dataset runs operations.
 *
 * Provides a simple interface for CRUD operations on dataset runs and items.
 */
export declare class DatasetRuns {
    private _client;
    /**
     * Initialize with a dataset runs client.
     *
     * @param client The dataset runs client instance
     */
    constructor(client: DatasetRunsClient);
    /**
     * Create a new dataset run.
     *
     * @param datasetName The name of the dataset to create a run for
     * @param options Additional options for the dataset run
     * @returns DatasetRunResponse containing the created dataset run data
     */
    create(datasetName: string, options?: {
        name?: string;
        description?: string;
        metadata?: string;
        tag?: string;
    }): Promise<DatasetRunResponse>;
    /**
     * List dataset runs for a dataset.
     *
     * @param datasetName The name of the dataset
     * @param page Page number for pagination (starts at 1)
     * @param limit Number of items per page
     * @param name Optional filter by run name
     * @param type Optional filter by run type
     * @returns ListDatasetRunsResponse containing dataset runs list and pagination info
     */
    list(datasetName: string, page?: number, limit?: number, name?: string, type?: string): Promise<ListDatasetRunsResponse>;
    /**
     * List items in a dataset run.
     *
     * @param datasetName The name of the dataset
     * @param datasetRunId The ID of the dataset run
     * @param page Page number for pagination (starts at 1)
     * @param limit Number of items per page
     * @returns ListDatasetRunItemsResponse containing dataset run items list and pagination info
     */
    listItems(datasetName: string, datasetRunId: string, page?: number, limit?: number): Promise<ListDatasetRunItemsResponse>;
    /**
     * Create/upload multiple items to a dataset run.
     *
     * @param datasetName The name of the dataset
     * @param datasetRunId The ID of the dataset run
     * @param items List of item objects, each containing item data
     * @returns CreateDatasetRunItemsResponse containing the bulk creation results
     */
    createItems(datasetName: string, datasetRunId: string, items: CreateDatasetRunItemRequest[]): Promise<CreateDatasetRunItemsResponse>;
    /**
     * Get the most recent OPEN dataset run with the specified tag.
     *
     * @param datasetName The name of the dataset
     * @param tagName The tag name to search for
     * @returns GetDatasetRunByTagResponse containing the dataset run data
     */
    getRunByTag(datasetName: string, tagName: string): Promise<GetDatasetRunByTagResponse>;
    /**
     * Get tags for a specific dataset run.
     *
     * @param datasetName The name of the dataset
     * @param datasetRunId The ID of the dataset run
     * @param page Page number for pagination (starts at 1)
     * @param limit Number of items per page
     * @returns GetDatasetRunTagsResponse containing dataset run tags list and pagination info
     */
    getRunTags(datasetName: string, datasetRunId: string, page?: number, limit?: number): Promise<GetDatasetRunTagsResponse>;
}
/**
 * Factory function to create a DatasetRuns instance
 *
 * @param baseUrl The base URL for the TestOps API
 * @param publicKey The public API key
 * @param secretKey The secret API key
 * @returns DatasetRuns instance ready for use
 */
export declare function createDatasetRuns(baseUrl: string, publicKey: string, secretKey: string): DatasetRuns;
//# sourceMappingURL=dataset-runs.d.ts.map