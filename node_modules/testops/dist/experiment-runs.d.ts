/**
 * Experiment Runs API client for TestOps.
 *
 * This module provides CRUD operations for experiment runs through the TestOps API.
 * Mirrors the Python SDK's experiment_runs.py structure exactly.
 */
import { ExperimentRunResponse, ListExperimentRunsResponse, UpdateExperimentRunRequest, ExperimentRunSubscriptionResult } from './types/experiment-types';
export { ExperimentRunStatus } from './types/experiment-types';
/**
 * Client for managing experiment runs through the TestOps API.
 */
export declare class ExperimentRunsClient {
    private baseUrl;
    private publicKey;
    private secretKey;
    /**
     * Initialize the experiment runs client.
     *
     * @param baseUrl The base URL for the TestOps API
     * @param publicKey The public API key
     * @param secretKey The secret API key
     */
    constructor(baseUrl: string, publicKey: string, secretKey: string);
    /**
     * Generate authentication headers for requests.
     */
    private _getAuthHeaders;
    /**
     * Validate experiment ID format.
     *
     * @param experimentId The experiment ID to validate
     * @throws Error If the experiment ID is invalid
     */
    private _validateExperimentId;
    /**
     * Validate experiment run ID format.
     *
     * @param experimentRunId The experiment run ID to validate
     * @throws Error If the experiment run ID is invalid
     */
    private _validateExperimentRunId;
    /**
     * Validate concurrency parameter.
     *
     * @param concurrency The concurrency value to validate
     * @throws Error If the concurrency is invalid
     */
    private _validateConcurrency;
    /**
     * Validate pagination parameters.
     *
     * @param page The page number to validate
     * @param limit The limit to validate
     * @param maxLimit The maximum allowed limit
     * @throws Error If pagination parameters are invalid
     */
    private _validatePaginationParams;
    /**
     * Create a new experiment run.
     *
     * @param experimentId The ID of the experiment to run
     * @param llmColumnName Optional name of the LLM column
     * @param concurrency Optional concurrency level for the run
     * @param runConfig Optional configuration for the run
     * @returns Promise<ExperimentRunResponse> containing the created experiment run data
     * @throws Error If input validation fails or API request fails
     */
    create(experimentId: string, llmColumnName?: string, concurrency?: number, runConfig?: Record<string, any>): Promise<ExperimentRunResponse>;
    /**
     * Find an experiment run by ID.
     *
     * @param experimentRunId The ID of the experiment run to retrieve
     * @returns Promise<ExperimentRunResponse> containing the experiment run data
     * @throws Error If input validation fails or experiment run is not found
     */
    find(experimentRunId: string): Promise<ExperimentRunResponse>;
    /**
     * List experiment runs.
     *
     * @param experimentId Optional experiment ID to filter by
     * @param page Page number for pagination (starts at 1)
     * @param limit Number of items per page
     * @returns Promise<ListExperimentRunsResponse> containing experiment runs list and pagination info
     * @throws Error If input validation fails or API request fails
     */
    list(experimentId?: string, page?: number, limit?: number): Promise<ListExperimentRunsResponse>;
    /**
     * Delete an experiment run by ID.
     *
     * @param experimentRunId The ID of the experiment run to delete
     * @returns Promise<ExperimentRunResponse> containing the deleted experiment run data
     * @throws Error If input validation fails or experiment run is not found
     */
    delete(experimentRunId: string): Promise<ExperimentRunResponse>;
    /**
     * Update an experiment run.
     *
     * @param experimentRunId The ID of the experiment run to update
     * @param updateData Update parameters (status, result, etc.)
     * @returns Promise<ExperimentRunResponse> containing the updated experiment run data
     * @throws Error If input validation fails or experiment run is not found
     */
    update(experimentRunId: string, updateData: UpdateExperimentRunRequest): Promise<ExperimentRunResponse>;
    /**
     * Subscribe to experiment run updates by polling the API.
     *
     * This method polls the experiment run status until it reaches a terminal state.
     * Uses async/await for non-blocking polling.
     *
     * @param experimentRunId The ID of the experiment run to monitor
     * @param timeout Optional timeout in milliseconds for the subscription (default: 120000 for 2 minutes)
     * @param pollInterval Time in milliseconds between polls (default: 5000)
     * @returns Promise<ExperimentRunSubscriptionResult> containing final status and experiment run data
     * @throws Error If input validation fails or subscription times out
     */
    subscribe(experimentRunId: string, timeout?: number, pollInterval?: number): Promise<ExperimentRunSubscriptionResult>;
}
/**
 * Convenience wrapper for experiment runs operations.
 *
 * Provides a simple interface for experiment run-level operations.
 */
export declare class ExperimentRuns {
    private _client;
    /**
     * Initialize with an experiment runs client.
     *
     * @param client The experiment runs client instance
     */
    constructor(client: ExperimentRunsClient);
    /**
     * Create a new experiment run.
     *
     * @param experimentId The ID of the experiment to run
     * @param llmColumnName Optional name of the LLM column
     * @param concurrency Optional concurrency level for the run
     * @param runConfig Optional configuration for the run
     * @returns Promise<ExperimentRunResponse> containing the created experiment run data
     */
    create(experimentId: string, llmColumnName?: string, concurrency?: number, runConfig?: Record<string, any>): Promise<ExperimentRunResponse>;
    /**
     * Find an experiment run by ID.
     *
     * @param experimentRunId The ID of the experiment run to retrieve
     * @returns Promise<ExperimentRunResponse> containing the experiment run data
     */
    find(experimentRunId: string): Promise<ExperimentRunResponse>;
    /**
     * List experiment runs.
     *
     * @param experimentId Optional experiment ID to filter by
     * @param page Page number for pagination (starts at 1)
     * @param limit Number of items per page
     * @returns Promise<ListExperimentRunsResponse> containing experiment runs list and pagination info
     */
    list(experimentId?: string, page?: number, limit?: number): Promise<ListExperimentRunsResponse>;
    /**
     * Delete an experiment run by ID.
     *
     * @param experimentRunId The ID of the experiment run to delete
     * @returns Promise<ExperimentRunResponse> containing the deleted experiment run data
     */
    delete(experimentRunId: string): Promise<ExperimentRunResponse>;
    /**
     * Update an experiment run.
     *
     * @param experimentRunId The ID of the experiment run to update
     * @param updateData Update parameters (status, result, etc.)
     * @returns Promise<ExperimentRunResponse> containing the updated experiment run data
     */
    update(experimentRunId: string, updateData: UpdateExperimentRunRequest): Promise<ExperimentRunResponse>;
    /**
     * Subscribe to experiment run updates by polling the API.
     *
     * @param experimentRunId The ID of the experiment run to monitor
     * @param timeout Optional timeout in milliseconds for the subscription (default: 120000)
     * @param pollInterval Time in milliseconds between polls (default: 5000)
     * @returns Promise<ExperimentRunSubscriptionResult> containing final status and experiment run data
     */
    subscribe(experimentRunId: string, timeout?: number, pollInterval?: number): Promise<ExperimentRunSubscriptionResult>;
}
/**
 * Factory function to create an ExperimentRuns instance with credentials.
 *
 * @param baseUrl The base URL for the TestOps API
 * @param publicKey The public API key
 * @param secretKey The secret API key
 * @returns A new ExperimentRuns instance
 */
export declare function createExperimentRuns(baseUrl: string, publicKey: string, secretKey: string): ExperimentRuns;
//# sourceMappingURL=experiment-runs.d.ts.map