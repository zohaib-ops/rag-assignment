"use strict";
/**
 * Structured exception hierarchy for TestOps SDK.
 *
 * This module provides comprehensive error handling for the TestOps NodeJS SDK,
 * mirroring the Python SDK's error structure for consistent behavior across platforms.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetError = exports.ExperimentError = exports.TimeoutError = exports.NetworkError = exports.RateLimitError = exports.NotFoundError = exports.AuthError = exports.ApiError = exports.ValidationError = exports.BaseError = exports.ErrorUtils = exports.TestOpsDatasetError = exports.TestOpsExperimentError = exports.TestOpsTimeoutError = exports.TestOpsNetworkError = exports.TestOpsRateLimitError = exports.TestOpsNotFoundError = exports.TestOpsAuthError = exports.TestOpsApiError = exports.TestOpsValidationError = exports.TestOpsConfigError = exports.TestOpsError = void 0;
/**
 * Base error class for all TestOps SDK errors.
 * Extends the native Error class with additional context.
 */
class TestOpsError extends Error {
    constructor(message, code = 'TESTOPS_ERROR', context) {
        super(message);
        this.name = this.constructor.name;
        this.code = code;
        this.context = context;
        // Ensure proper prototype chain for instanceof checks
        Object.setPrototypeOf(this, TestOpsError.prototype);
    }
    /**
     * Convert error to a structured object for logging/debugging
     */
    toJSON() {
        return {
            name: this.name,
            message: this.message,
            code: this.code,
            context: this.context,
            stack: this.stack
        };
    }
}
exports.TestOpsError = TestOpsError;
exports.BaseError = TestOpsError;
/**
 * Configuration and initialization errors
 */
class TestOpsConfigError extends TestOpsError {
    constructor(message, context) {
        super(message, 'CONFIG_ERROR', context);
        Object.setPrototypeOf(this, TestOpsConfigError.prototype);
    }
}
exports.TestOpsConfigError = TestOpsConfigError;
/**
 * Input validation errors
 */
class TestOpsValidationError extends TestOpsError {
    constructor(message, field, value, context) {
        super(message, 'VALIDATION_ERROR', { field, value, ...context });
        this.field = field;
        this.value = value;
        Object.setPrototypeOf(this, TestOpsValidationError.prototype);
    }
}
exports.TestOpsValidationError = TestOpsValidationError;
exports.ValidationError = TestOpsValidationError;
/**
 * HTTP API errors with status code information
 */
class TestOpsApiError extends TestOpsError {
    constructor(message, statusCode, statusText = 'Unknown Error', response, context) {
        super(message, 'API_ERROR', { statusCode, statusText, response, ...context });
        this.statusCode = statusCode;
        this.statusText = statusText;
        this.response = response;
        Object.setPrototypeOf(this, TestOpsApiError.prototype);
    }
    /**
     * Check if error is a client error (4xx)
     */
    get isClientError() {
        return this.statusCode >= 400 && this.statusCode < 500;
    }
    /**
     * Check if error is a server error (5xx)
     */
    get isServerError() {
        return this.statusCode >= 500 && this.statusCode < 600;
    }
}
exports.TestOpsApiError = TestOpsApiError;
exports.ApiError = TestOpsApiError;
/**
 * Authentication and authorization errors
 */
class TestOpsAuthError extends TestOpsApiError {
    constructor(message = 'Authentication failed', statusCode = 401, context) {
        super(message, statusCode, 'Unauthorized', undefined, context);
        this.code = 'AUTH_ERROR';
        Object.setPrototypeOf(this, TestOpsAuthError.prototype);
    }
}
exports.TestOpsAuthError = TestOpsAuthError;
exports.AuthError = TestOpsAuthError;
/**
 * Resource not found errors
 */
class TestOpsNotFoundError extends TestOpsApiError {
    constructor(message, resourceType, resourceId, context) {
        super(message, 404, 'Not Found', undefined, { resourceType, resourceId, ...context });
        this.code = 'NOT_FOUND_ERROR';
        this.resourceType = resourceType;
        this.resourceId = resourceId;
        Object.setPrototypeOf(this, TestOpsNotFoundError.prototype);
    }
}
exports.TestOpsNotFoundError = TestOpsNotFoundError;
exports.NotFoundError = TestOpsNotFoundError;
/**
 * Rate limiting errors
 */
class TestOpsRateLimitError extends TestOpsApiError {
    constructor(message = 'Rate limit exceeded', retryAfter, context) {
        super(message, 429, 'Too Many Requests', undefined, { retryAfter, ...context });
        this.code = 'RATE_LIMIT_ERROR';
        this.retryAfter = retryAfter;
        Object.setPrototypeOf(this, TestOpsRateLimitError.prototype);
    }
}
exports.TestOpsRateLimitError = TestOpsRateLimitError;
exports.RateLimitError = TestOpsRateLimitError;
/**
 * Network and connectivity errors
 */
class TestOpsNetworkError extends TestOpsError {
    constructor(message, originalError, context) {
        super(message, 'NETWORK_ERROR', { originalError: originalError?.message, ...context });
        this.originalError = originalError;
        Object.setPrototypeOf(this, TestOpsNetworkError.prototype);
    }
}
exports.TestOpsNetworkError = TestOpsNetworkError;
exports.NetworkError = TestOpsNetworkError;
/**
 * Timeout errors for operations that exceed time limits
 */
class TestOpsTimeoutError extends TestOpsError {
    constructor(message, timeoutMs, operation, context) {
        super(message, 'TIMEOUT_ERROR', { timeoutMs, operation, ...context });
        this.timeoutMs = timeoutMs;
        this.operation = operation;
        Object.setPrototypeOf(this, TestOpsTimeoutError.prototype);
    }
}
exports.TestOpsTimeoutError = TestOpsTimeoutError;
exports.TimeoutError = TestOpsTimeoutError;
/**
 * Experiment-specific errors
 */
class TestOpsExperimentError extends TestOpsError {
    constructor(message, experimentId, context) {
        super(message, 'EXPERIMENT_ERROR', { experimentId, ...context });
        this.experimentId = experimentId;
        Object.setPrototypeOf(this, TestOpsExperimentError.prototype);
    }
}
exports.TestOpsExperimentError = TestOpsExperimentError;
exports.ExperimentError = TestOpsExperimentError;
/**
 * Dataset-specific errors
 */
class TestOpsDatasetError extends TestOpsError {
    constructor(message, datasetName, datasetRunId, context) {
        super(message, 'DATASET_ERROR', { datasetName, datasetRunId, ...context });
        this.datasetName = datasetName;
        this.datasetRunId = datasetRunId;
        Object.setPrototypeOf(this, TestOpsDatasetError.prototype);
    }
}
exports.TestOpsDatasetError = TestOpsDatasetError;
exports.DatasetError = TestOpsDatasetError;
/**
 * Utility functions for error handling
 */
class ErrorUtils {
    /**
     * Create appropriate TestOps error from HTTP response
     */
    static fromHttpResponse(statusCode, statusText, message, response) {
        const errorMessage = message || `HTTP ${statusCode}: ${statusText}`;
        switch (statusCode) {
            case 401:
            case 403:
                return new TestOpsAuthError(errorMessage, statusCode);
            case 404:
                return new TestOpsNotFoundError(errorMessage);
            case 429:
                const retryAfter = response?.headers?.['retry-after']
                    ? parseInt(response.headers['retry-after'])
                    : undefined;
                return new TestOpsRateLimitError(errorMessage, retryAfter);
            case 502:
            case 503:
            case 504:
                return new TestOpsNetworkError(`Service unavailable: ${errorMessage}`);
            default:
                return new TestOpsApiError(errorMessage, statusCode, statusText, response);
        }
    }
    /**
     * Create validation error with field information
     */
    static validationError(field, value, message) {
        return new TestOpsValidationError(message, field, value);
    }
    /**
     * Create config error with context
     */
    static configError(message, config) {
        return new TestOpsConfigError(message, { config });
    }
    /**
     * Check if error is a TestOps error
     */
    static isTestOpsError(error) {
        return error instanceof TestOpsError;
    }
    /**
     * Check if error is retryable (network issues, 5xx errors)
     */
    static isRetryableError(error) {
        if (error instanceof TestOpsNetworkError) {
            return true;
        }
        if (error instanceof TestOpsApiError) {
            return error.isServerError;
        }
        return false;
    }
    /**
     * Extract error message safely from any error type
     */
    static extractMessage(error) {
        if (typeof error === 'string') {
            return error;
        }
        if (error?.message) {
            return error.message;
        }
        return 'Unknown error occurred';
    }
}
exports.ErrorUtils = ErrorUtils;
//# sourceMappingURL=errors.js.map