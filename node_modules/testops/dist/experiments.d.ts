/**
 * Experiments API client for TestOps.
 *
 * This module provides operations for experiments through the TestOps API.
 * Mirrors the Python SDK's experiments.py structure exactly.
 */
import { ExperimentResponse, CreateExperimentWithTagRequest, CreateExperimentWithPromptRequest, ListExperimentsResponse } from './types/experiment-types';
/**
 * Client for managing experiments through the TestOps API.
 */
export declare class ExperimentsClient {
    private baseUrl;
    private publicKey;
    private secretKey;
    /**
     * Initialize the experiments client.
     *
     * @param baseUrl The base URL for the TestOps API
     * @param publicKey The public API key
     * @param secretKey The secret API key
     */
    constructor(baseUrl: string, publicKey: string, secretKey: string);
    /**
     * Generate authentication headers for requests.
     */
    private _getAuthHeaders;
    /**
     * Validate experiment ID format.
     *
     * @param experimentId The experiment ID to validate
     * @throws Error If the experiment ID is invalid
     */
    private _validateExperimentId;
    /**
     * Validate pagination parameters.
     *
     * @param page The page number to validate
     * @param limit The limit to validate
     * @param maxLimit The maximum allowed limit
     * @throws Error If pagination parameters are invalid
     */
    private _validatePaginationParams;
    /**
     * Validate experiment creation request data.
     *
     * @param requestData The request data to validate
     * @throws Error If validation fails
     */
    private _validateCreateRequest;
    /**
     * Create a new experiment.
     *
     * @param requestData The experiment creation request data
     * @returns Promise<ExperimentResponse> containing the created experiment
     * @throws Error If input validation fails or API request fails
     */
    create(requestData: CreateExperimentWithTagRequest | CreateExperimentWithPromptRequest): Promise<ExperimentResponse>;
    /**
     * List experiments with pagination.
     *
     * @param limit Maximum number of experiments to return (default: 50)
     * @param page Page number for pagination (default: 1)
     * @returns Promise<ListExperimentsResponse> containing the list of experiments and total count
     * @throws Error If input validation fails or API request fails
     */
    list(limit?: number, page?: number): Promise<ListExperimentsResponse>;
    /**
     * Get a single experiment by ID.
     *
     * @param experimentId The ID of the experiment to retrieve
     * @returns Promise<ExperimentResponse> containing the experiment data
     * @throws Error If input validation fails or experiment is not found
     */
    find(experimentId: string): Promise<ExperimentResponse>;
    /**
     * Delete an experiment by ID.
     *
     * @param experimentId The ID of the experiment to delete
     * @returns Promise<ExperimentResponse> containing the deleted experiment data
     * @throws Error If input validation fails or experiment is not found
     */
    delete(experimentId: string): Promise<ExperimentResponse>;
}
/**
 * Convenience wrapper for experiment operations.
 *
 * Provides a simple interface for experiment-level operations.
 */
export declare class Experiments {
    private _client;
    /**
     * Initialize with an experiments client.
     *
     * @param client The experiments client instance
     */
    constructor(client: ExperimentsClient);
    /**
     * Create a new experiment.
     *
     * @param requestData The experiment creation request data
     * @returns Promise<ExperimentResponse> containing the created experiment
     */
    create(requestData: CreateExperimentWithTagRequest | CreateExperimentWithPromptRequest): Promise<ExperimentResponse>;
    /**
     * List experiments with pagination.
     *
     * @param limit Maximum number of experiments to return (default: 50)
     * @param page Page number for pagination (default: 1)
     * @returns Promise<ListExperimentsResponse> containing the list of experiments and total count
     */
    list(limit?: number, page?: number): Promise<ListExperimentsResponse>;
    /**
     * Get a single experiment by ID.
     *
     * @param experimentId The ID of the experiment to retrieve
     * @returns Promise<ExperimentResponse> containing the experiment data
     */
    find(experimentId: string): Promise<ExperimentResponse>;
    /**
     * Delete an experiment by ID.
     *
     * @param experimentId The ID of the experiment to delete
     * @returns Promise<ExperimentResponse> containing the deleted experiment data
     */
    delete(experimentId: string): Promise<ExperimentResponse>;
}
/**
 * Factory function to create an Experiments instance with credentials.
 *
 * @param baseUrl The base URL for the TestOps API
 * @param publicKey The public API key
 * @param secretKey The secret API key
 * @returns A new Experiments instance
 */
export declare function createExperiments(baseUrl: string, publicKey: string, secretKey: string): Experiments;
//# sourceMappingURL=experiments.d.ts.map