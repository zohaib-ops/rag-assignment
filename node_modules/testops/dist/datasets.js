"use strict";
/**
 * Datasets API client for TestOps.
 *
 * This module provides operations for datasets through the TestOps API.
 * Mirrors the Python SDK's datasets.py structure exactly.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Datasets = exports.DatasetsClient = void 0;
/**
 * Client for managing datasets through the TestOps API.
 */
class DatasetsClient {
    /**
     * Initialize the datasets client.
     *
     * @param baseUrl The base URL for the TestOps API
     * @param publicKey The public API key
     * @param secretKey The secret API key
     */
    constructor(baseUrl, publicKey, secretKey) {
        if (!baseUrl || !publicKey || !secretKey) {
            throw new Error('baseUrl, publicKey, and secretKey are required');
        }
        this.baseUrl = baseUrl.replace(/\/$/, '');
        this.publicKey = publicKey;
        this.secretKey = secretKey;
    }
    /**
     * Generate authentication headers for requests.
     */
    _getAuthHeaders() {
        const authString = Buffer.from(`${this.publicKey}:${this.secretKey}`).toString('base64');
        return {
            'Authorization': `Basic ${authString}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        };
    }
    /**
     * Validate dataset name format.
     *
     * @param datasetName The dataset name to validate
     * @throws Error If the dataset name is invalid
     */
    _validateDatasetName(datasetName) {
        if (!datasetName || typeof datasetName !== 'string') {
            throw new Error('dataset_name must be a non-empty string');
        }
    }
    /**
     * Get all tags for a dataset.
     *
     * @param datasetName The name of the dataset
     * @returns GetDatasetTagsResponse containing the list of tags for the dataset
     * @throws Error If input validation fails or API request fails
     */
    async getTags(datasetName) {
        this._validateDatasetName(datasetName);
        const url = `${this.baseUrl}/api/public/datasets/${datasetName}/tags`;
        // Use native fetch - simple thin wrapper
        const response = await fetch(url, {
            method: 'GET',
            headers: this._getAuthHeaders(),
        });
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return await response.json();
    }
}
exports.DatasetsClient = DatasetsClient;
/**
 * Convenience wrapper for dataset operations.
 *
 * Provides a simple interface for dataset-level operations.
 */
class Datasets {
    /**
     * Initialize with a datasets client.
     *
     * @param client The datasets client instance
     */
    constructor(client) {
        this._client = client;
    }
    /**
     * Get all tags for a dataset.
     *
     * @param datasetName The name of the dataset
     * @returns GetDatasetTagsResponse containing the list of tags for the dataset
     */
    async getTags(datasetName) {
        return this._client.getTags(datasetName);
    }
}
exports.Datasets = Datasets;
//# sourceMappingURL=datasets.js.map