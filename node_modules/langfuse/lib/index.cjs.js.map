{"version":3,"file":"index.cjs.js","sources":["../src/storage.ts","../src/publicApi.ts","../src/langfuse.ts","../src/openai/LangfuseSingleton.ts","../src/openai/parseOpenAI.ts","../src/openai/utils.ts","../src/openai/traceMethod.ts","../src/openai/observeOpenAI.ts"],"sourcesContent":["import { type LangfuseOptions } from \"./types\";\n\nexport type LangfuseStorage = {\n  getItem: (key: string) => string | null | undefined;\n  setItem: (key: string, value: string) => void;\n  removeItem: (key: string) => void;\n  clear: () => void;\n  getAllKeys: () => readonly string[];\n};\n\n// Methods partially borrowed from quirksmode.org/js/cookies.html\nexport const cookieStore: LangfuseStorage = {\n  getItem(key) {\n    try {\n      const nameEQ = key + \"=\";\n      const ca = document.cookie.split(\";\");\n      for (let i = 0; i < ca.length; i++) {\n        let c = ca[i];\n        while (c.charAt(0) == \" \") {\n          c = c.substring(1, c.length);\n        }\n        if (c.indexOf(nameEQ) === 0) {\n          return decodeURIComponent(c.substring(nameEQ.length, c.length));\n        }\n      }\n    } catch (err) {}\n    return null;\n  },\n\n  setItem(key: string, value: string) {\n    try {\n      const cdomain = \"\",\n        expires = \"\",\n        secure = \"\";\n\n      const new_cookie_val = key + \"=\" + encodeURIComponent(value) + expires + \"; path=/\" + cdomain + secure;\n      document.cookie = new_cookie_val;\n    } catch (err) {\n      return;\n    }\n  },\n\n  removeItem(name) {\n    try {\n      cookieStore.setItem(name, \"\");\n    } catch (err) {\n      return;\n    }\n  },\n  clear() {\n    document.cookie = \"\";\n  },\n  getAllKeys() {\n    const ca = document.cookie.split(\";\");\n    const keys = [];\n\n    for (let i = 0; i < ca.length; i++) {\n      let c = ca[i];\n      while (c.charAt(0) == \" \") {\n        c = c.substring(1, c.length);\n      }\n      keys.push(c.split(\"=\")[0]);\n    }\n\n    return keys;\n  },\n};\n\nconst createStorageLike = (store: any): LangfuseStorage => {\n  return {\n    getItem(key) {\n      return store.getItem(key);\n    },\n\n    setItem(key, value) {\n      store.setItem(key, value);\n    },\n\n    removeItem(key) {\n      store.removeItem(key);\n    },\n    clear() {\n      store.clear();\n    },\n    getAllKeys() {\n      const keys = [];\n      for (const key in localStorage) {\n        keys.push(key);\n      }\n      return keys;\n    },\n  };\n};\n\nconst checkStoreIsSupported = (storage: LangfuseStorage, key = \"__mplssupport__\"): boolean => {\n  if (!window) {\n    return false;\n  }\n  try {\n    const val = \"xyz\";\n    storage.setItem(key, val);\n    if (storage.getItem(key) !== val) {\n      return false;\n    }\n    storage.removeItem(key);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nlet localStore: LangfuseStorage | undefined = undefined;\nlet sessionStore: LangfuseStorage | undefined = undefined;\n\nconst createMemoryStorage = (): LangfuseStorage => {\n  const _cache: { [key: string]: any | undefined } = {};\n\n  const store: LangfuseStorage = {\n    getItem(key) {\n      return _cache[key];\n    },\n\n    setItem(key, value) {\n      _cache[key] = value !== null ? value : undefined;\n    },\n\n    removeItem(key) {\n      delete _cache[key];\n    },\n    clear() {\n      for (const key in _cache) {\n        delete _cache[key];\n      }\n    },\n    getAllKeys() {\n      const keys = [];\n      for (const key in _cache) {\n        keys.push(key);\n      }\n      return keys;\n    },\n  };\n  return store;\n};\n\nexport const getStorage = (type: LangfuseOptions[\"persistence\"], window: Window | undefined): LangfuseStorage => {\n  if (typeof window !== undefined && window) {\n    if (!localStorage) {\n      const _localStore = createStorageLike(window.localStorage);\n      localStore = checkStoreIsSupported(_localStore) ? _localStore : undefined;\n    }\n\n    if (!sessionStore) {\n      const _sessionStore = createStorageLike(window.sessionStorage);\n      sessionStore = checkStoreIsSupported(_sessionStore) ? _sessionStore : undefined;\n    }\n  }\n\n  switch (type) {\n    case \"cookie\":\n      return cookieStore || localStore || sessionStore || createMemoryStorage();\n    case \"localStorage\":\n      return localStore || sessionStore || createMemoryStorage();\n    case \"sessionStorage\":\n      return sessionStore || createMemoryStorage();\n    case \"memory\":\n      return createMemoryStorage();\n    default:\n      return createMemoryStorage();\n  }\n};\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\n/** AnnotationQueueStatus */\nexport type ApiAnnotationQueueStatus = \"PENDING\" | \"COMPLETED\";\n\n/** AnnotationQueueObjectType */\nexport type ApiAnnotationQueueObjectType = \"TRACE\" | \"OBSERVATION\";\n\n/** AnnotationQueue */\nexport interface ApiAnnotationQueue {\n  id: string;\n  name: string;\n  description?: string | null;\n  scoreConfigIds: string[];\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  updatedAt: string;\n}\n\n/** AnnotationQueueItem */\nexport interface ApiAnnotationQueueItem {\n  id: string;\n  queueId: string;\n  objectId: string;\n  objectType: ApiAnnotationQueueObjectType;\n  status: ApiAnnotationQueueStatus;\n  /** @format date-time */\n  completedAt?: string | null;\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  updatedAt: string;\n}\n\n/** PaginatedAnnotationQueues */\nexport interface ApiPaginatedAnnotationQueues {\n  data: ApiAnnotationQueue[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** PaginatedAnnotationQueueItems */\nexport interface ApiPaginatedAnnotationQueueItems {\n  data: ApiAnnotationQueueItem[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** CreateAnnotationQueueItemRequest */\nexport interface ApiCreateAnnotationQueueItemRequest {\n  objectId: string;\n  objectType: ApiAnnotationQueueObjectType;\n  /** Defaults to PENDING for new queue items */\n  status?: ApiAnnotationQueueStatus | null;\n}\n\n/** UpdateAnnotationQueueItemRequest */\nexport interface ApiUpdateAnnotationQueueItemRequest {\n  status?: ApiAnnotationQueueStatus | null;\n}\n\n/** DeleteAnnotationQueueItemResponse */\nexport interface ApiDeleteAnnotationQueueItemResponse {\n  success: boolean;\n  message: string;\n}\n\n/** CreateCommentRequest */\nexport interface ApiCreateCommentRequest {\n  /** The id of the project to attach the comment to. */\n  projectId: string;\n  /** The type of the object to attach the comment to (trace, observation, session, prompt). */\n  objectType: string;\n  /** The id of the object to attach the comment to. If this does not reference a valid existing object, an error will be thrown. */\n  objectId: string;\n  /** The content of the comment. May include markdown. Currently limited to 3000 characters. */\n  content: string;\n  /** The id of the user who created the comment. */\n  authorUserId?: string | null;\n}\n\n/** CreateCommentResponse */\nexport interface ApiCreateCommentResponse {\n  /** The id of the created object in Langfuse */\n  id: string;\n}\n\n/** GetCommentsResponse */\nexport interface ApiGetCommentsResponse {\n  data: ApiComment[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** Trace */\nexport interface ApiTrace {\n  /** The unique identifier of a trace */\n  id: string;\n  /**\n   * The timestamp when the trace was created\n   * @format date-time\n   */\n  timestamp: string;\n  /** The name of the trace */\n  name?: string | null;\n  /** The input data of the trace. Can be any JSON. */\n  input?: any;\n  /** The output data of the trace. Can be any JSON. */\n  output?: any;\n  /** The session identifier associated with the trace */\n  sessionId?: string | null;\n  /** The release version of the application when the trace was created */\n  release?: string | null;\n  /** The version of the trace */\n  version?: string | null;\n  /** The user identifier associated with the trace */\n  userId?: string | null;\n  /** The metadata associated with the trace. Can be any JSON. */\n  metadata?: any;\n  /** The tags associated with the trace. Can be an array of strings or null. */\n  tags?: string[] | null;\n  /** Public traces are accessible via url without login */\n  public?: boolean | null;\n  /** The environment from which this trace originated. Can be any lowercase alphanumeric string with hyphens and underscores that does not start with 'langfuse'. */\n  environment?: string | null;\n}\n\n/** TraceWithDetails */\nexport type ApiTraceWithDetails = ApiTrace & {\n  /** Path of trace in Langfuse UI */\n  htmlPath: string;\n  /**\n   * Latency of trace in seconds\n   * @format double\n   */\n  latency: number;\n  /**\n   * Cost of trace in USD\n   * @format double\n   */\n  totalCost: number;\n  /** List of observation ids */\n  observations: string[];\n  /** List of score ids */\n  scores: string[];\n};\n\n/** TraceWithFullDetails */\nexport type ApiTraceWithFullDetails = ApiTrace & {\n  /** Path of trace in Langfuse UI */\n  htmlPath: string;\n  /**\n   * Latency of trace in seconds\n   * @format double\n   */\n  latency: number;\n  /**\n   * Cost of trace in USD\n   * @format double\n   */\n  totalCost: number;\n  /** List of observations */\n  observations: ApiObservationsView[];\n  /** List of scores */\n  scores: ApiScoreV1[];\n};\n\n/** Session */\nexport interface ApiSession {\n  id: string;\n  /** @format date-time */\n  createdAt: string;\n  projectId: string;\n  /** The environment from which this session originated. */\n  environment?: string | null;\n}\n\n/** SessionWithTraces */\nexport type ApiSessionWithTraces = ApiSession & {\n  traces: ApiTrace[];\n};\n\n/** Observation */\nexport interface ApiObservation {\n  /** The unique identifier of the observation */\n  id: string;\n  /** The trace ID associated with the observation */\n  traceId?: string | null;\n  /** The type of the observation */\n  type: string;\n  /** The name of the observation */\n  name?: string | null;\n  /**\n   * The start time of the observation\n   * @format date-time\n   */\n  startTime: string;\n  /**\n   * The end time of the observation.\n   * @format date-time\n   */\n  endTime?: string | null;\n  /**\n   * The completion start time of the observation\n   * @format date-time\n   */\n  completionStartTime?: string | null;\n  /** The model used for the observation */\n  model?: string | null;\n  /** The parameters of the model used for the observation */\n  modelParameters?: Record<string, ApiMapValue>;\n  /** The input data of the observation */\n  input?: any;\n  /** The version of the observation */\n  version?: string | null;\n  /** Additional metadata of the observation */\n  metadata?: any;\n  /** The output data of the observation */\n  output?: any;\n  /** (Deprecated. Use usageDetails and costDetails instead.) The usage data of the observation */\n  usage?: ApiUsage | null;\n  /** The level of the observation */\n  level: ApiObservationLevel;\n  /** The status message of the observation */\n  statusMessage?: string | null;\n  /** The parent observation ID */\n  parentObservationId?: string | null;\n  /** The prompt ID associated with the observation */\n  promptId?: string | null;\n  /** The usage details of the observation. Key is the name of the usage metric, value is the number of units consumed. The total key is the sum of all (non-total) usage metrics or the total value ingested. */\n  usageDetails?: Record<string, number>;\n  /** The cost details of the observation. Key is the name of the cost metric, value is the cost in USD. The total key is the sum of all (non-total) cost metrics or the total value ingested. */\n  costDetails?: Record<string, number>;\n  /** The environment from which this observation originated. Can be any lowercase alphanumeric string with hyphens and underscores that does not start with 'langfuse'. */\n  environment?: string | null;\n}\n\n/** ObservationsView */\nexport type ApiObservationsView = ApiObservation & {\n  /** The name of the prompt associated with the observation */\n  promptName?: string | null;\n  /** The version of the prompt associated with the observation */\n  promptVersion?: number | null;\n  /** The unique identifier of the model */\n  modelId?: string | null;\n  /**\n   * The price of the input in USD\n   * @format double\n   */\n  inputPrice?: number | null;\n  /**\n   * The price of the output in USD.\n   * @format double\n   */\n  outputPrice?: number | null;\n  /**\n   * The total price in USD.\n   * @format double\n   */\n  totalPrice?: number | null;\n  /**\n   * (Deprecated. Use usageDetails and costDetails instead.) The calculated cost of the input in USD\n   * @format double\n   */\n  calculatedInputCost?: number | null;\n  /**\n   * (Deprecated. Use usageDetails and costDetails instead.) The calculated cost of the output in USD\n   * @format double\n   */\n  calculatedOutputCost?: number | null;\n  /**\n   * (Deprecated. Use usageDetails and costDetails instead.) The calculated total cost in USD\n   * @format double\n   */\n  calculatedTotalCost?: number | null;\n  /**\n   * The latency in seconds.\n   * @format double\n   */\n  latency?: number | null;\n  /**\n   * The time to the first token in seconds\n   * @format double\n   */\n  timeToFirstToken?: number | null;\n};\n\n/**\n * Usage\n * (Deprecated. Use usageDetails and costDetails instead.) Standard interface for usage and cost\n */\nexport interface ApiUsage {\n  /** Number of input units (e.g. tokens) */\n  input?: number | null;\n  /** Number of output units (e.g. tokens) */\n  output?: number | null;\n  /** Defaults to input+output if not set */\n  total?: number | null;\n  /** Unit of usage in Langfuse */\n  unit?: ApiModelUsageUnit | null;\n  /**\n   * USD input cost\n   * @format double\n   */\n  inputCost?: number | null;\n  /**\n   * USD output cost\n   * @format double\n   */\n  outputCost?: number | null;\n  /**\n   * USD total cost, defaults to input+output\n   * @format double\n   */\n  totalCost?: number | null;\n}\n\n/**\n * ScoreConfig\n * Configuration for a score\n */\nexport interface ApiScoreConfig {\n  id: string;\n  name: string;\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  updatedAt: string;\n  projectId: string;\n  dataType: ApiScoreDataType;\n  /** Whether the score config is archived. Defaults to false */\n  isArchived: boolean;\n  /**\n   * Sets minimum value for numerical scores. If not set, the minimum value defaults to -∞\n   * @format double\n   */\n  minValue?: number | null;\n  /**\n   * Sets maximum value for numerical scores. If not set, the maximum value defaults to +∞\n   * @format double\n   */\n  maxValue?: number | null;\n  /** Configures custom categories for categorical scores */\n  categories?: ApiConfigCategory[] | null;\n  description?: string | null;\n}\n\n/** ConfigCategory */\nexport interface ApiConfigCategory {\n  /** @format double */\n  value: number;\n  label: string;\n}\n\n/** BaseScoreV1 */\nexport interface ApiBaseScoreV1 {\n  id: string;\n  traceId: string;\n  name: string;\n  source: ApiScoreSource;\n  observationId?: string | null;\n  /** @format date-time */\n  timestamp: string;\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  updatedAt: string;\n  authorUserId?: string | null;\n  comment?: string | null;\n  metadata?: any;\n  /** Reference a score config on a score. When set, config and score name must be equal and value must comply to optionally defined numerical range */\n  configId?: string | null;\n  /** Reference an annotation queue on a score. Populated if the score was initially created in an annotation queue. */\n  queueId?: string | null;\n  /** The environment from which this score originated. Can be any lowercase alphanumeric string with hyphens and underscores that does not start with 'langfuse'. */\n  environment?: string | null;\n}\n\n/** NumericScoreV1 */\nexport type ApiNumericScoreV1 = ApiBaseScoreV1 & {\n  /**\n   * The numeric value of the score\n   * @format double\n   */\n  value: number;\n};\n\n/** BooleanScoreV1 */\nexport type ApiBooleanScoreV1 = ApiBaseScoreV1 & {\n  /**\n   * The numeric value of the score. Equals 1 for \"True\" and 0 for \"False\"\n   * @format double\n   */\n  value: number;\n  /** The string representation of the score value. Is inferred from the numeric value and equals \"True\" or \"False\" */\n  stringValue: string;\n};\n\n/** CategoricalScoreV1 */\nexport type ApiCategoricalScoreV1 = ApiBaseScoreV1 & {\n  /**\n   * Only defined if a config is linked. Represents the numeric category mapping of the stringValue\n   * @format double\n   */\n  value?: number | null;\n  /** The string representation of the score value. If no config is linked, can be any string. Otherwise, must map to a config category */\n  stringValue: string;\n};\n\n/** ScoreV1 */\nexport type ApiScoreV1 =\n  | ({\n      dataType: \"NUMERIC\";\n    } & ApiNumericScoreV1)\n  | ({\n      dataType: \"CATEGORICAL\";\n    } & ApiCategoricalScoreV1)\n  | ({\n      dataType: \"BOOLEAN\";\n    } & ApiBooleanScoreV1);\n\n/** BaseScore */\nexport interface ApiBaseScore {\n  id: string;\n  traceId?: string | null;\n  sessionId?: string | null;\n  observationId?: string | null;\n  datasetRunId?: string | null;\n  name: string;\n  source: ApiScoreSource;\n  /** @format date-time */\n  timestamp: string;\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  updatedAt: string;\n  authorUserId?: string | null;\n  comment?: string | null;\n  metadata?: any;\n  /** Reference a score config on a score. When set, config and score name must be equal and value must comply to optionally defined numerical range */\n  configId?: string | null;\n  /** Reference an annotation queue on a score. Populated if the score was initially created in an annotation queue. */\n  queueId?: string | null;\n  /** The environment from which this score originated. Can be any lowercase alphanumeric string with hyphens and underscores that does not start with 'langfuse'. */\n  environment?: string | null;\n}\n\n/** NumericScore */\nexport type ApiNumericScore = ApiBaseScore & {\n  /**\n   * The numeric value of the score\n   * @format double\n   */\n  value: number;\n};\n\n/** BooleanScore */\nexport type ApiBooleanScore = ApiBaseScore & {\n  /**\n   * The numeric value of the score. Equals 1 for \"True\" and 0 for \"False\"\n   * @format double\n   */\n  value: number;\n  /** The string representation of the score value. Is inferred from the numeric value and equals \"True\" or \"False\" */\n  stringValue: string;\n};\n\n/** CategoricalScore */\nexport type ApiCategoricalScore = ApiBaseScore & {\n  /**\n   * Only defined if a config is linked. Represents the numeric category mapping of the stringValue\n   * @format double\n   */\n  value?: number | null;\n  /** The string representation of the score value. If no config is linked, can be any string. Otherwise, must map to a config category */\n  stringValue: string;\n};\n\n/** Score */\nexport type ApiScore =\n  | ({\n      dataType: \"NUMERIC\";\n    } & ApiNumericScore)\n  | ({\n      dataType: \"CATEGORICAL\";\n    } & ApiCategoricalScore)\n  | ({\n      dataType: \"BOOLEAN\";\n    } & ApiBooleanScore);\n\n/**\n * CreateScoreValue\n * The value of the score. Must be passed as string for categorical scores, and numeric for boolean and numeric scores\n */\nexport type ApiCreateScoreValue = number | string;\n\n/** Comment */\nexport interface ApiComment {\n  id: string;\n  projectId: string;\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  updatedAt: string;\n  objectType: ApiCommentObjectType;\n  objectId: string;\n  content: string;\n  authorUserId?: string | null;\n}\n\n/** Dataset */\nexport interface ApiDataset {\n  id: string;\n  name: string;\n  description?: string | null;\n  metadata?: any;\n  projectId: string;\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  updatedAt: string;\n}\n\n/** DatasetItem */\nexport interface ApiDatasetItem {\n  id: string;\n  status: ApiDatasetStatus;\n  input?: any;\n  expectedOutput?: any;\n  metadata?: any;\n  sourceTraceId?: string | null;\n  sourceObservationId?: string | null;\n  datasetId: string;\n  datasetName: string;\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  updatedAt: string;\n}\n\n/** DatasetRunItem */\nexport interface ApiDatasetRunItem {\n  id: string;\n  datasetRunId: string;\n  datasetRunName: string;\n  datasetItemId: string;\n  traceId: string;\n  observationId?: string | null;\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  updatedAt: string;\n}\n\n/** DatasetRun */\nexport interface ApiDatasetRun {\n  /** Unique identifier of the dataset run */\n  id: string;\n  /** Name of the dataset run */\n  name: string;\n  /** Description of the run */\n  description?: string | null;\n  /** Metadata of the dataset run */\n  metadata?: any;\n  /** Id of the associated dataset */\n  datasetId: string;\n  /** Name of the associated dataset */\n  datasetName: string;\n  /**\n   * The date and time when the dataset run was created\n   * @format date-time\n   */\n  createdAt: string;\n  /**\n   * The date and time when the dataset run was last updated\n   * @format date-time\n   */\n  updatedAt: string;\n}\n\n/** DatasetRunWithItems */\nexport type ApiDatasetRunWithItems = ApiDatasetRun & {\n  datasetRunItems: ApiDatasetRunItem[];\n};\n\n/**\n * Model\n * Model definition used for transforming usage into USD cost and/or tokenization.\n */\nexport interface ApiModel {\n  id: string;\n  /** Name of the model definition. If multiple with the same name exist, they are applied in the following order: (1) custom over built-in, (2) newest according to startTime where model.startTime<observation.startTime */\n  modelName: string;\n  /** Regex pattern which matches this model definition to generation.model. Useful in case of fine-tuned models. If you want to exact match, use `(?i)^modelname$` */\n  matchPattern: string;\n  /**\n   * Apply only to generations which are newer than this ISO date.\n   * @format date-time\n   */\n  startDate?: string | null;\n  /** Unit used by this model. */\n  unit?: ApiModelUsageUnit | null;\n  /**\n   * Deprecated. See 'prices' instead. Price (USD) per input unit\n   * @format double\n   */\n  inputPrice?: number | null;\n  /**\n   * Deprecated. See 'prices' instead. Price (USD) per output unit\n   * @format double\n   */\n  outputPrice?: number | null;\n  /**\n   * Deprecated. See 'prices' instead. Price (USD) per total unit. Cannot be set if input or output price is set.\n   * @format double\n   */\n  totalPrice?: number | null;\n  /** Optional. Tokenizer to be applied to observations which match to this model. See docs for more details. */\n  tokenizerId?: string | null;\n  /** Optional. Configuration for the selected tokenizer. Needs to be JSON. See docs for more details. */\n  tokenizerConfig?: any;\n  isLangfuseManaged: boolean;\n  /** Price (USD) by usage type */\n  prices: Record<string, ApiModelPrice>;\n}\n\n/** ModelPrice */\nexport interface ApiModelPrice {\n  /** @format double */\n  price: number;\n}\n\n/**\n * ModelUsageUnit\n * Unit of usage in Langfuse\n */\nexport type ApiModelUsageUnit = \"CHARACTERS\" | \"TOKENS\" | \"MILLISECONDS\" | \"SECONDS\" | \"IMAGES\" | \"REQUESTS\";\n\n/** ObservationLevel */\nexport type ApiObservationLevel = \"DEBUG\" | \"DEFAULT\" | \"WARNING\" | \"ERROR\";\n\n/** MapValue */\nexport type ApiMapValue = string | null | number | null | boolean | null | string[] | null;\n\n/** CommentObjectType */\nexport type ApiCommentObjectType = \"TRACE\" | \"OBSERVATION\" | \"SESSION\" | \"PROMPT\";\n\n/** DatasetStatus */\nexport type ApiDatasetStatus = \"ACTIVE\" | \"ARCHIVED\";\n\n/** ScoreSource */\nexport type ApiScoreSource = \"ANNOTATION\" | \"API\" | \"EVAL\";\n\n/** ScoreDataType */\nexport type ApiScoreDataType = \"NUMERIC\" | \"BOOLEAN\" | \"CATEGORICAL\";\n\n/** DeleteDatasetItemResponse */\nexport interface ApiDeleteDatasetItemResponse {\n  /** Success message after deletion */\n  message: string;\n}\n\n/** CreateDatasetItemRequest */\nexport interface ApiCreateDatasetItemRequest {\n  datasetName: string;\n  input?: any;\n  expectedOutput?: any;\n  metadata?: any;\n  sourceTraceId?: string | null;\n  sourceObservationId?: string | null;\n  /** Dataset items are upserted on their id. Id needs to be unique (project-level) and cannot be reused across datasets. */\n  id?: string | null;\n  /** Defaults to ACTIVE for newly created items */\n  status?: ApiDatasetStatus | null;\n}\n\n/** PaginatedDatasetItems */\nexport interface ApiPaginatedDatasetItems {\n  data: ApiDatasetItem[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** CreateDatasetRunItemRequest */\nexport interface ApiCreateDatasetRunItemRequest {\n  runName: string;\n  /** Description of the run. If run exists, description will be updated. */\n  runDescription?: string | null;\n  /** Metadata of the dataset run, updates run if run already exists */\n  metadata?: any;\n  datasetItemId: string;\n  observationId?: string | null;\n  /** traceId should always be provided. For compatibility with older SDK versions it can also be inferred from the provided observationId. */\n  traceId?: string | null;\n}\n\n/** PaginatedDatasetRunItems */\nexport interface ApiPaginatedDatasetRunItems {\n  data: ApiDatasetRunItem[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** PaginatedDatasets */\nexport interface ApiPaginatedDatasets {\n  data: ApiDataset[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** CreateDatasetRequest */\nexport interface ApiCreateDatasetRequest {\n  name: string;\n  description?: string | null;\n  metadata?: any;\n}\n\n/** PaginatedDatasetRuns */\nexport interface ApiPaginatedDatasetRuns {\n  data: ApiDatasetRun[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** DeleteDatasetRunResponse */\nexport interface ApiDeleteDatasetRunResponse {\n  message: string;\n}\n\n/** HealthResponse */\nexport interface ApiHealthResponse {\n  /**\n   * Langfuse server version\n   * @example \"1.25.0\"\n   */\n  version: string;\n  /** @example \"OK\" */\n  status: string;\n}\n\n/** IngestionEvent */\nexport type ApiIngestionEvent =\n  | ({\n      type: \"trace-create\";\n    } & ApiTraceEvent)\n  | ({\n      type: \"score-create\";\n    } & ApiScoreEvent)\n  | ({\n      type: \"span-create\";\n    } & ApiCreateSpanEvent)\n  | ({\n      type: \"span-update\";\n    } & ApiUpdateSpanEvent)\n  | ({\n      type: \"generation-create\";\n    } & ApiCreateGenerationEvent)\n  | ({\n      type: \"generation-update\";\n    } & ApiUpdateGenerationEvent)\n  | ({\n      type: \"event-create\";\n    } & ApiCreateEventEvent)\n  | ({\n      type: \"sdk-log\";\n    } & ApiSDKLogEvent)\n  | ({\n      type: \"observation-create\";\n    } & ApiCreateObservationEvent)\n  | ({\n      type: \"observation-update\";\n    } & ApiUpdateObservationEvent);\n\n/** ObservationType */\nexport type ApiObservationType = \"SPAN\" | \"GENERATION\" | \"EVENT\";\n\n/** IngestionUsage */\nexport type ApiIngestionUsage = ApiUsage | ApiOpenAIUsage;\n\n/**\n * OpenAIUsage\n * Usage interface of OpenAI for improved compatibility.\n */\nexport interface ApiOpenAIUsage {\n  promptTokens?: number | null;\n  completionTokens?: number | null;\n  totalTokens?: number | null;\n}\n\n/** OptionalObservationBody */\nexport interface ApiOptionalObservationBody {\n  traceId?: string | null;\n  name?: string | null;\n  /** @format date-time */\n  startTime?: string | null;\n  metadata?: any;\n  input?: any;\n  output?: any;\n  level?: ApiObservationLevel | null;\n  statusMessage?: string | null;\n  parentObservationId?: string | null;\n  version?: string | null;\n  environment?: string | null;\n}\n\n/** CreateEventBody */\nexport type ApiCreateEventBody = ApiOptionalObservationBody & {\n  id?: string | null;\n};\n\n/** UpdateEventBody */\nexport type ApiUpdateEventBody = ApiOptionalObservationBody & {\n  id: string;\n};\n\n/** CreateSpanBody */\nexport type ApiCreateSpanBody = ApiCreateEventBody & {\n  /** @format date-time */\n  endTime?: string | null;\n};\n\n/** UpdateSpanBody */\nexport type ApiUpdateSpanBody = ApiUpdateEventBody & {\n  /** @format date-time */\n  endTime?: string | null;\n};\n\n/** CreateGenerationBody */\nexport type ApiCreateGenerationBody = ApiCreateSpanBody & {\n  /** @format date-time */\n  completionStartTime?: string | null;\n  model?: string | null;\n  modelParameters?: Record<string, ApiMapValue>;\n  usage?: ApiIngestionUsage | null;\n  usageDetails?: ApiUsageDetails | null;\n  costDetails?: Record<string, number>;\n  promptName?: string | null;\n  promptVersion?: number | null;\n};\n\n/** UpdateGenerationBody */\nexport type ApiUpdateGenerationBody = ApiUpdateSpanBody & {\n  /** @format date-time */\n  completionStartTime?: string | null;\n  model?: string | null;\n  modelParameters?: Record<string, ApiMapValue>;\n  usage?: ApiIngestionUsage | null;\n  promptName?: string | null;\n  usageDetails?: ApiUsageDetails | null;\n  costDetails?: Record<string, number>;\n  promptVersion?: number | null;\n};\n\n/** ObservationBody */\nexport interface ApiObservationBody {\n  id?: string | null;\n  traceId?: string | null;\n  type: ApiObservationType;\n  name?: string | null;\n  /** @format date-time */\n  startTime?: string | null;\n  /** @format date-time */\n  endTime?: string | null;\n  /** @format date-time */\n  completionStartTime?: string | null;\n  model?: string | null;\n  modelParameters?: Record<string, ApiMapValue>;\n  input?: any;\n  version?: string | null;\n  metadata?: any;\n  output?: any;\n  /** (Deprecated. Use usageDetails and costDetails instead.) Standard interface for usage and cost */\n  usage?: ApiUsage | null;\n  level?: ApiObservationLevel | null;\n  statusMessage?: string | null;\n  parentObservationId?: string | null;\n  environment?: string | null;\n}\n\n/** TraceBody */\nexport interface ApiTraceBody {\n  id?: string | null;\n  /** @format date-time */\n  timestamp?: string | null;\n  name?: string | null;\n  userId?: string | null;\n  input?: any;\n  output?: any;\n  sessionId?: string | null;\n  release?: string | null;\n  version?: string | null;\n  metadata?: any;\n  tags?: string[] | null;\n  environment?: string | null;\n  /** Make trace publicly accessible via url */\n  public?: boolean | null;\n}\n\n/** SDKLogBody */\nexport interface ApiSDKLogBody {\n  log: any;\n}\n\n/** ScoreBody */\nexport interface ApiScoreBody {\n  id?: string | null;\n  traceId?: string | null;\n  sessionId?: string | null;\n  observationId?: string | null;\n  datasetRunId?: string | null;\n  /** @example \"novelty\" */\n  name: string;\n  environment?: string | null;\n  /** The value of the score. Must be passed as string for categorical scores, and numeric for boolean and numeric scores. Boolean score values must equal either 1 or 0 (true or false) */\n  value: ApiCreateScoreValue;\n  comment?: string | null;\n  metadata?: any;\n  /** When set, must match the score value's type. If not set, will be inferred from the score value or config */\n  dataType?: ApiScoreDataType | null;\n  /** Reference a score config on a score. When set, the score name must equal the config name and scores must comply with the config's range and data type. For categorical scores, the value must map to a config category. Numeric scores might be constrained by the score config's max and min values */\n  configId?: string | null;\n}\n\n/** BaseEvent */\nexport interface ApiBaseEvent {\n  /** UUID v4 that identifies the event */\n  id: string;\n  /** Datetime (ISO 8601) of event creation in client. Should be as close to actual event creation in client as possible, this timestamp will be used for ordering of events in future release. Resolution: milliseconds (required), microseconds (optimal). */\n  timestamp: string;\n  /** Optional. Metadata field used by the Langfuse SDKs for debugging. */\n  metadata?: any;\n}\n\n/** TraceEvent */\nexport type ApiTraceEvent = ApiBaseEvent & {\n  body: ApiTraceBody;\n};\n\n/** CreateObservationEvent */\nexport type ApiCreateObservationEvent = ApiBaseEvent & {\n  body: ApiObservationBody;\n};\n\n/** UpdateObservationEvent */\nexport type ApiUpdateObservationEvent = ApiBaseEvent & {\n  body: ApiObservationBody;\n};\n\n/** ScoreEvent */\nexport type ApiScoreEvent = ApiBaseEvent & {\n  body: ApiScoreBody;\n};\n\n/** SDKLogEvent */\nexport type ApiSDKLogEvent = ApiBaseEvent & {\n  body: ApiSDKLogBody;\n};\n\n/** CreateGenerationEvent */\nexport type ApiCreateGenerationEvent = ApiBaseEvent & {\n  body: ApiCreateGenerationBody;\n};\n\n/** UpdateGenerationEvent */\nexport type ApiUpdateGenerationEvent = ApiBaseEvent & {\n  body: ApiUpdateGenerationBody;\n};\n\n/** CreateSpanEvent */\nexport type ApiCreateSpanEvent = ApiBaseEvent & {\n  body: ApiCreateSpanBody;\n};\n\n/** UpdateSpanEvent */\nexport type ApiUpdateSpanEvent = ApiBaseEvent & {\n  body: ApiUpdateSpanBody;\n};\n\n/** CreateEventEvent */\nexport type ApiCreateEventEvent = ApiBaseEvent & {\n  body: ApiCreateEventBody;\n};\n\n/** IngestionSuccess */\nexport interface ApiIngestionSuccess {\n  id: string;\n  status: number;\n}\n\n/** IngestionError */\nexport interface ApiIngestionError {\n  id: string;\n  status: number;\n  message?: string | null;\n  error?: any;\n}\n\n/** IngestionResponse */\nexport interface ApiIngestionResponse {\n  successes: ApiIngestionSuccess[];\n  errors: ApiIngestionError[];\n}\n\n/**\n * OpenAICompletionUsageSchema\n * OpenAI Usage schema from (Chat-)Completion APIs\n */\nexport interface ApiOpenAICompletionUsageSchema {\n  prompt_tokens: number;\n  completion_tokens: number;\n  total_tokens: number;\n  prompt_tokens_details?: Record<string, number | null>;\n  completion_tokens_details?: Record<string, number | null>;\n}\n\n/**\n * OpenAIResponseUsageSchema\n * OpenAI Usage schema from Response API\n */\nexport interface ApiOpenAIResponseUsageSchema {\n  input_tokens: number;\n  output_tokens: number;\n  total_tokens: number;\n  input_tokens_details?: Record<string, number | null>;\n  output_tokens_details?: Record<string, number | null>;\n}\n\n/** UsageDetails */\nexport type ApiUsageDetails = Record<string, number> | ApiOpenAICompletionUsageSchema | ApiOpenAIResponseUsageSchema;\n\n/** GetMediaResponse */\nexport interface ApiGetMediaResponse {\n  /** The unique langfuse identifier of a media record */\n  mediaId: string;\n  /** The MIME type of the media record */\n  contentType: string;\n  /** The size of the media record in bytes */\n  contentLength: number;\n  /**\n   * The date and time when the media record was uploaded\n   * @format date-time\n   */\n  uploadedAt: string;\n  /** The download URL of the media record */\n  url: string;\n  /** The expiry date and time of the media record download URL */\n  urlExpiry: string;\n}\n\n/** PatchMediaBody */\nexport interface ApiPatchMediaBody {\n  /**\n   * The date and time when the media record was uploaded\n   * @format date-time\n   */\n  uploadedAt: string;\n  /** The HTTP status code of the upload */\n  uploadHttpStatus: number;\n  /** The HTTP error message of the upload */\n  uploadHttpError?: string | null;\n  /** The time in milliseconds it took to upload the media record */\n  uploadTimeMs?: number | null;\n}\n\n/** GetMediaUploadUrlRequest */\nexport interface ApiGetMediaUploadUrlRequest {\n  /** The trace ID associated with the media record */\n  traceId: string;\n  /** The observation ID associated with the media record. If the media record is associated directly with a trace, this will be null. */\n  observationId?: string | null;\n  /** The MIME type of the media record */\n  contentType: ApiMediaContentType;\n  /** The size of the media record in bytes */\n  contentLength: number;\n  /** The SHA-256 hash of the media record */\n  sha256Hash: string;\n  /** The trace / observation field the media record is associated with. This can be one of `input`, `output`, `metadata` */\n  field: string;\n}\n\n/** GetMediaUploadUrlResponse */\nexport interface ApiGetMediaUploadUrlResponse {\n  /** The presigned upload URL. If the asset is already uploaded, this will be null */\n  uploadUrl?: string | null;\n  /** The unique langfuse identifier of a media record */\n  mediaId: string;\n}\n\n/**\n * MediaContentType\n * The MIME type of the media record\n */\nexport type ApiMediaContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/jpg\"\n  | \"image/webp\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/tiff\"\n  | \"image/bmp\"\n  | \"audio/mpeg\"\n  | \"audio/mp3\"\n  | \"audio/wav\"\n  | \"audio/ogg\"\n  | \"audio/oga\"\n  | \"audio/aac\"\n  | \"audio/mp4\"\n  | \"audio/flac\"\n  | \"video/mp4\"\n  | \"video/webm\"\n  | \"text/plain\"\n  | \"text/html\"\n  | \"text/css\"\n  | \"text/csv\"\n  | \"application/pdf\"\n  | \"application/msword\"\n  | \"application/vnd.ms-excel\"\n  | \"application/zip\"\n  | \"application/json\"\n  | \"application/xml\"\n  | \"application/octet-stream\";\n\n/** MetricsResponse */\nexport interface ApiMetricsResponse {\n  /**\n   * The metrics data. Each item in the list contains the metric values and dimensions requested in the query.\n   * Format varies based on the query parameters.\n   * Histograms will return an array with [lower, upper, height] tuples.\n   */\n  data: Record<string, any>[];\n}\n\n/** PaginatedModels */\nexport interface ApiPaginatedModels {\n  data: ApiModel[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** CreateModelRequest */\nexport interface ApiCreateModelRequest {\n  /** Name of the model definition. If multiple with the same name exist, they are applied in the following order: (1) custom over built-in, (2) newest according to startTime where model.startTime<observation.startTime */\n  modelName: string;\n  /** Regex pattern which matches this model definition to generation.model. Useful in case of fine-tuned models. If you want to exact match, use `(?i)^modelname$` */\n  matchPattern: string;\n  /**\n   * Apply only to generations which are newer than this ISO date.\n   * @format date-time\n   */\n  startDate?: string | null;\n  /** Unit used by this model. */\n  unit?: ApiModelUsageUnit | null;\n  /**\n   * Price (USD) per input unit\n   * @format double\n   */\n  inputPrice?: number | null;\n  /**\n   * Price (USD) per output unit\n   * @format double\n   */\n  outputPrice?: number | null;\n  /**\n   * Price (USD) per total units. Cannot be set if input or output price is set.\n   * @format double\n   */\n  totalPrice?: number | null;\n  /** Optional. Tokenizer to be applied to observations which match to this model. See docs for more details. */\n  tokenizerId?: string | null;\n  /** Optional. Configuration for the selected tokenizer. Needs to be JSON. See docs for more details. */\n  tokenizerConfig?: any;\n}\n\n/** Observations */\nexport interface ApiObservations {\n  data: ApiObservation[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** ObservationsViews */\nexport interface ApiObservationsViews {\n  data: ApiObservationsView[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** MembershipRole */\nexport type ApiMembershipRole = \"OWNER\" | \"ADMIN\" | \"MEMBER\" | \"VIEWER\";\n\n/** MembershipRequest */\nexport interface ApiMembershipRequest {\n  userId: string;\n  role: ApiMembershipRole;\n}\n\n/** MembershipResponse */\nexport interface ApiMembershipResponse {\n  userId: string;\n  role: ApiMembershipRole;\n  email: string;\n  name: string;\n}\n\n/** MembershipsResponse */\nexport interface ApiMembershipsResponse {\n  memberships: ApiMembershipResponse[];\n}\n\n/** OrganizationProject */\nexport interface ApiOrganizationProject {\n  id: string;\n  name: string;\n  metadata?: Record<string, any>;\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  updatedAt: string;\n}\n\n/** OrganizationProjectsResponse */\nexport interface ApiOrganizationProjectsResponse {\n  projects: ApiOrganizationProject[];\n}\n\n/** Projects */\nexport interface ApiProjects {\n  data: ApiProject[];\n}\n\n/** Project */\nexport interface ApiProject {\n  id: string;\n  name: string;\n  /** Metadata for the project */\n  metadata: Record<string, any>;\n  /** Number of days to retain data. Null or 0 means no retention. Omitted if no retention is configured. */\n  retentionDays?: number | null;\n}\n\n/** ProjectDeletionResponse */\nexport interface ApiProjectDeletionResponse {\n  success: boolean;\n  message: string;\n}\n\n/**\n * ApiKeyList\n * List of API keys for a project\n */\nexport interface ApiApiKeyList {\n  apiKeys: ApiApiKeySummary[];\n}\n\n/**\n * ApiKeySummary\n * Summary of an API key\n */\nexport interface ApiApiKeySummary {\n  id: string;\n  /** @format date-time */\n  createdAt: string;\n  /** @format date-time */\n  expiresAt?: string | null;\n  /** @format date-time */\n  lastUsedAt?: string | null;\n  note?: string | null;\n  publicKey: string;\n  displaySecretKey: string;\n}\n\n/**\n * ApiKeyResponse\n * Response for API key creation\n */\nexport interface ApiApiKeyResponse {\n  id: string;\n  /** @format date-time */\n  createdAt: string;\n  publicKey: string;\n  secretKey: string;\n  displaySecretKey: string;\n  note?: string | null;\n}\n\n/**\n * ApiKeyDeletionResponse\n * Response for API key deletion\n */\nexport interface ApiApiKeyDeletionResponse {\n  success: boolean;\n}\n\n/** PromptMetaListResponse */\nexport interface ApiPromptMetaListResponse {\n  data: ApiPromptMeta[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** PromptMeta */\nexport interface ApiPromptMeta {\n  name: string;\n  versions: number[];\n  labels: string[];\n  tags: string[];\n  /** @format date-time */\n  lastUpdatedAt: string;\n  /** Config object of the most recent prompt version that matches the filters (if any are provided) */\n  lastConfig: any;\n}\n\n/** CreatePromptRequest */\nexport type ApiCreatePromptRequest =\n  | ({\n      type: \"chat\";\n    } & ApiCreateChatPromptRequest)\n  | ({\n      type: \"text\";\n    } & ApiCreateTextPromptRequest);\n\n/** CreateChatPromptRequest */\nexport interface ApiCreateChatPromptRequest {\n  name: string;\n  prompt: ApiChatMessageWithPlaceholders[];\n  config?: any;\n  /** List of deployment labels of this prompt version. */\n  labels?: string[] | null;\n  /** List of tags to apply to all versions of this prompt. */\n  tags?: string[] | null;\n  /** Commit message for this prompt version. */\n  commitMessage?: string | null;\n}\n\n/** CreateTextPromptRequest */\nexport interface ApiCreateTextPromptRequest {\n  name: string;\n  prompt: string;\n  config?: any;\n  /** List of deployment labels of this prompt version. */\n  labels?: string[] | null;\n  /** List of tags to apply to all versions of this prompt. */\n  tags?: string[] | null;\n  /** Commit message for this prompt version. */\n  commitMessage?: string | null;\n}\n\n/** Prompt */\nexport type ApiPrompt =\n  | ({\n      type: \"chat\";\n    } & ApiChatPrompt)\n  | ({\n      type: \"text\";\n    } & ApiTextPrompt);\n\n/** BasePrompt */\nexport interface ApiBasePrompt {\n  name: string;\n  version: number;\n  config: any;\n  /** List of deployment labels of this prompt version. */\n  labels: string[];\n  /** List of tags. Used to filter via UI and API. The same across versions of a prompt. */\n  tags: string[];\n  /** Commit message for this prompt version. */\n  commitMessage?: string | null;\n  /** The dependency resolution graph for the current prompt. Null if prompt has no dependencies. */\n  resolutionGraph?: Record<string, any>;\n}\n\n/** ChatMessageWithPlaceholders */\nexport type ApiChatMessageWithPlaceholders =\n  | ({\n      type: \"chatmessage\";\n    } & ApiChatMessage)\n  | ({\n      type: \"placeholder\";\n    } & ApiPlaceholderMessage);\n\n/** ChatMessage */\nexport interface ApiChatMessage {\n  role: string;\n  content: string;\n}\n\n/** PlaceholderMessage */\nexport interface ApiPlaceholderMessage {\n  name: string;\n}\n\n/** TextPrompt */\nexport type ApiTextPrompt = ApiBasePrompt & {\n  prompt: string;\n};\n\n/** ChatPrompt */\nexport type ApiChatPrompt = ApiBasePrompt & {\n  prompt: ApiChatMessageWithPlaceholders[];\n};\n\n/** ServiceProviderConfig */\nexport interface ApiServiceProviderConfig {\n  schemas: string[];\n  documentationUri: string;\n  patch: ApiScimFeatureSupport;\n  bulk: ApiBulkConfig;\n  filter: ApiFilterConfig;\n  changePassword: ApiScimFeatureSupport;\n  sort: ApiScimFeatureSupport;\n  etag: ApiScimFeatureSupport;\n  authenticationSchemes: ApiAuthenticationScheme[];\n  meta: ApiResourceMeta;\n}\n\n/** ScimFeatureSupport */\nexport interface ApiScimFeatureSupport {\n  supported: boolean;\n}\n\n/** BulkConfig */\nexport interface ApiBulkConfig {\n  supported: boolean;\n  maxOperations: number;\n  maxPayloadSize: number;\n}\n\n/** FilterConfig */\nexport interface ApiFilterConfig {\n  supported: boolean;\n  maxResults: number;\n}\n\n/** ResourceMeta */\nexport interface ApiResourceMeta {\n  resourceType: string;\n  location: string;\n}\n\n/** AuthenticationScheme */\nexport interface ApiAuthenticationScheme {\n  name: string;\n  description: string;\n  specUri: string;\n  type: string;\n  primary: boolean;\n}\n\n/** ResourceTypesResponse */\nexport interface ApiResourceTypesResponse {\n  schemas: string[];\n  totalResults: number;\n  Resources: ApiResourceType[];\n}\n\n/** ResourceType */\nexport interface ApiResourceType {\n  schemas?: string[] | null;\n  id: string;\n  name: string;\n  endpoint: string;\n  description: string;\n  schema: string;\n  schemaExtensions: ApiSchemaExtension[];\n  meta: ApiResourceMeta;\n}\n\n/** SchemaExtension */\nexport interface ApiSchemaExtension {\n  schema: string;\n  required: boolean;\n}\n\n/** SchemasResponse */\nexport interface ApiSchemasResponse {\n  schemas: string[];\n  totalResults: number;\n  Resources: ApiSchemaResource[];\n}\n\n/** SchemaResource */\nexport interface ApiSchemaResource {\n  id: string;\n  name: string;\n  description: string;\n  attributes: any[];\n  meta: ApiResourceMeta;\n}\n\n/** ScimUsersListResponse */\nexport interface ApiScimUsersListResponse {\n  schemas: string[];\n  totalResults: number;\n  startIndex: number;\n  itemsPerPage: number;\n  Resources: ApiScimUser[];\n}\n\n/** ScimUser */\nexport interface ApiScimUser {\n  schemas: string[];\n  id: string;\n  userName: string;\n  name: ApiScimName;\n  emails: ApiScimEmail[];\n  meta: ApiUserMeta;\n}\n\n/** UserMeta */\nexport interface ApiUserMeta {\n  resourceType: string;\n  created?: string | null;\n  lastModified?: string | null;\n}\n\n/** ScimName */\nexport interface ApiScimName {\n  formatted?: string | null;\n}\n\n/** ScimEmail */\nexport interface ApiScimEmail {\n  primary: boolean;\n  value: string;\n  type: string;\n}\n\n/**\n * EmptyResponse\n * Empty response for 204 No Content responses\n */\nexport type ApiEmptyResponse = object;\n\n/** ScoreConfigs */\nexport interface ApiScoreConfigs {\n  data: ApiScoreConfig[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** CreateScoreConfigRequest */\nexport interface ApiCreateScoreConfigRequest {\n  name: string;\n  dataType: ApiScoreDataType;\n  /** Configure custom categories for categorical scores. Pass a list of objects with `label` and `value` properties. Categories are autogenerated for boolean configs and cannot be passed */\n  categories?: ApiConfigCategory[] | null;\n  /**\n   * Configure a minimum value for numerical scores. If not set, the minimum value defaults to -∞\n   * @format double\n   */\n  minValue?: number | null;\n  /**\n   * Configure a maximum value for numerical scores. If not set, the maximum value defaults to +∞\n   * @format double\n   */\n  maxValue?: number | null;\n  /** Description is shown across the Langfuse UI and can be used to e.g. explain the config categories in detail, why a numeric range was set, or provide additional context on config name or usage */\n  description?: string | null;\n}\n\n/** GetScoresResponseTraceData */\nexport interface ApiGetScoresResponseTraceData {\n  /** The user ID associated with the trace referenced by score */\n  userId?: string | null;\n  /** A list of tags associated with the trace referenced by score */\n  tags?: string[] | null;\n  /** The environment of the trace referenced by score */\n  environment?: string | null;\n}\n\n/** GetScoresResponseDataNumeric */\nexport type ApiGetScoresResponseDataNumeric = ApiNumericScore & {\n  trace?: ApiGetScoresResponseTraceData | null;\n};\n\n/** GetScoresResponseDataCategorical */\nexport type ApiGetScoresResponseDataCategorical = ApiCategoricalScore & {\n  trace?: ApiGetScoresResponseTraceData | null;\n};\n\n/** GetScoresResponseDataBoolean */\nexport type ApiGetScoresResponseDataBoolean = ApiBooleanScore & {\n  trace?: ApiGetScoresResponseTraceData | null;\n};\n\n/** GetScoresResponseData */\nexport type ApiGetScoresResponseData =\n  | ({\n      dataType: \"NUMERIC\";\n    } & ApiGetScoresResponseDataNumeric)\n  | ({\n      dataType: \"CATEGORICAL\";\n    } & ApiGetScoresResponseDataCategorical)\n  | ({\n      dataType: \"BOOLEAN\";\n    } & ApiGetScoresResponseDataBoolean);\n\n/** GetScoresResponse */\nexport interface ApiGetScoresResponse {\n  data: ApiGetScoresResponseData[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** CreateScoreRequest */\nexport interface ApiCreateScoreRequest {\n  id?: string | null;\n  traceId?: string | null;\n  sessionId?: string | null;\n  observationId?: string | null;\n  datasetRunId?: string | null;\n  /** @example \"novelty\" */\n  name: string;\n  /** The value of the score. Must be passed as string for categorical scores, and numeric for boolean and numeric scores. Boolean score values must equal either 1 or 0 (true or false) */\n  value: ApiCreateScoreValue;\n  comment?: string | null;\n  metadata?: any;\n  /** The environment of the score. Can be any lowercase alphanumeric string with hyphens and underscores that does not start with 'langfuse'. */\n  environment?: string | null;\n  /** The data type of the score. When passing a configId this field is inferred. Otherwise, this field must be passed or will default to numeric. */\n  dataType?: ApiScoreDataType | null;\n  /** Reference a score config on a score. The unique langfuse identifier of a score config. When passing this field, the dataType and stringValue fields are automatically populated. */\n  configId?: string | null;\n}\n\n/** CreateScoreResponse */\nexport interface ApiCreateScoreResponse {\n  /** The id of the created object in Langfuse */\n  id: string;\n}\n\n/** PaginatedSessions */\nexport interface ApiPaginatedSessions {\n  data: ApiSession[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** Traces */\nexport interface ApiTraces {\n  data: ApiTraceWithDetails[];\n  meta: ApiUtilsMetaResponse;\n}\n\n/** DeleteTraceResponse */\nexport interface ApiDeleteTraceResponse {\n  message: string;\n}\n\n/** Sort */\nexport interface ApiSort {\n  id: string;\n}\n\n/** utilsMetaResponse */\nexport interface ApiUtilsMetaResponse {\n  /** current page number */\n  page: number;\n  /** number of items per page */\n  limit: number;\n  /** number of total items given the current filters/selection (if any) */\n  totalItems: number;\n  /** number of total pages given the current limit */\n  totalPages: number;\n}\n\nexport interface ApiAnnotationQueuesListQueuesParams {\n  /** page number, starts at 1 */\n  page?: number | null;\n  /** limit of items per page */\n  limit?: number | null;\n}\n\nexport interface ApiAnnotationQueuesListQueueItemsParams {\n  /** Filter by status */\n  status?: ApiAnnotationQueueStatus | null;\n  /** page number, starts at 1 */\n  page?: number | null;\n  /** limit of items per page */\n  limit?: number | null;\n  /** The unique identifier of the annotation queue */\n  queueId: string;\n}\n\nexport interface ApiCommentsGetParams {\n  /** Page number, starts at 1. */\n  page?: number | null;\n  /** Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit */\n  limit?: number | null;\n  /** Filter comments by object type (trace, observation, session, prompt). */\n  objectType?: string | null;\n  /** Filter comments by object id. If objectType is not provided, an error will be thrown. */\n  objectId?: string | null;\n  /** Filter comments by author user id. */\n  authorUserId?: string | null;\n}\n\nexport interface ApiDatasetItemsListParams {\n  datasetName?: string | null;\n  sourceTraceId?: string | null;\n  sourceObservationId?: string | null;\n  /** page number, starts at 1 */\n  page?: number | null;\n  /** limit of items per page */\n  limit?: number | null;\n}\n\nexport interface ApiDatasetRunItemsListParams {\n  datasetId: string;\n  runName: string;\n  /** page number, starts at 1 */\n  page?: number | null;\n  /** limit of items per page */\n  limit?: number | null;\n  response: ApiPaginatedDatasetRunItems;\n}\n\nexport interface ApiDatasetsListParams {\n  /** page number, starts at 1 */\n  page?: number | null;\n  /** limit of items per page */\n  limit?: number | null;\n}\n\nexport interface ApiDatasetsGetRunsParams {\n  /** page number, starts at 1 */\n  page?: number | null;\n  /** limit of items per page */\n  limit?: number | null;\n  datasetName: string;\n}\n\nexport interface ApiIngestionBatchPayload {\n  /** Batch of tracing events to be ingested. Discriminated by attribute `type`. */\n  batch: ApiIngestionEvent[];\n  /** Optional. Metadata field used by the Langfuse SDKs for debugging. */\n  metadata?: any;\n}\n\nexport interface ApiMetricsMetricsParams {\n  /**\n   * JSON string containing the query parameters with the following structure:\n   * ```json\n   * {\n   *   \"view\": string,           // Required. One of \"traces\", \"observations\", \"scores-numeric\", \"scores-categorical\"\n   *   \"dimensions\": [           // Optional. Default: []\n   *     {\n   *       \"field\": string       // Field to group by, e.g. \"name\", \"userId\", \"sessionId\"\n   *     }\n   *   ],\n   *   \"metrics\": [              // Required. At least one metric must be provided\n   *     {\n   *       \"measure\": string,    // What to measure, e.g. \"count\", \"latency\", \"value\"\n   *       \"aggregation\": string // How to aggregate, e.g. \"count\", \"sum\", \"avg\", \"p95\", \"histogram\"\n   *     }\n   *   ],\n   *   \"filters\": [              // Optional. Default: []\n   *     {\n   *       \"column\": string,     // Column to filter on\n   *       \"operator\": string,   // Operator, e.g. \"=\", \">\", \"<\", \"contains\"\n   *       \"value\": any,         // Value to compare against\n   *       \"type\": string,       // Data type, e.g. \"string\", \"number\", \"stringObject\"\n   *       \"key\": string         // Required only when filtering on metadata\n   *     }\n   *   ],\n   *   \"timeDimension\": {        // Optional. Default: null. If provided, results will be grouped by time\n   *     \"granularity\": string   // One of \"minute\", \"hour\", \"day\", \"week\", \"month\", \"auto\"\n   *   },\n   *   \"fromTimestamp\": string,  // Required. ISO datetime string for start of time range\n   *   \"toTimestamp\": string,    // Required. ISO datetime string for end of time range\n   *   \"orderBy\": [              // Optional. Default: null\n   *     {\n   *       \"field\": string,      // Field to order by\n   *       \"direction\": string   // \"asc\" or \"desc\"\n   *     }\n   *   ],\n   *   \"config\": {               // Optional. Query-specific configuration\n   *     \"bins\": number,         // Optional. Number of bins for histogram (1-100), default: 10\n   *     \"row_limit\": number     // Optional. Row limit for results (1-1000)\n   *   }\n   * }\n   * ```\n   */\n  query: string;\n}\n\nexport interface ApiModelsListParams {\n  /** page number, starts at 1 */\n  page?: number | null;\n  /** limit of items per page */\n  limit?: number | null;\n}\n\nexport interface ApiObservationsGetManyParams {\n  /** Page number, starts at 1. */\n  page?: number | null;\n  /** Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit. */\n  limit?: number | null;\n  name?: string | null;\n  userId?: string | null;\n  type?: string | null;\n  traceId?: string | null;\n  parentObservationId?: string | null;\n  /** Optional filter for observations where the environment is one of the provided values. */\n  environment?: (string | null)[];\n  /**\n   * Retrieve only observations with a start_time on or after this datetime (ISO 8601).\n   * @format date-time\n   */\n  fromStartTime?: string | null;\n  /**\n   * Retrieve only observations with a start_time before this datetime (ISO 8601).\n   * @format date-time\n   */\n  toStartTime?: string | null;\n  /** Optional filter to only include observations with a certain version. */\n  version?: string | null;\n}\n\nexport interface ApiProjectsCreatePayload {\n  name: string;\n  /** Optional metadata for the project */\n  metadata?: Record<string, any>;\n  /** Number of days to retain data. Must be 0 or at least 3 days. Requires data-retention entitlement for non-zero values. Optional. */\n  retention: number;\n}\n\nexport interface ApiProjectsUpdatePayload {\n  name: string;\n  /** Optional metadata for the project */\n  metadata?: Record<string, any>;\n  /** Number of days to retain data. Must be 0 or at least 3 days. Requires data-retention entitlement for non-zero values. Optional. */\n  retention: number;\n}\n\nexport interface ApiProjectsCreateApiKeyPayload {\n  /** Optional note for the API key */\n  note?: string | null;\n}\n\nexport interface ApiPromptVersionUpdatePayload {\n  /** New labels for the prompt version. Labels are unique across versions. The \"latest\" label is reserved and managed by Langfuse. */\n  newLabels: string[];\n}\n\nexport interface ApiPromptsGetParams {\n  /** Version of the prompt to be retrieved. */\n  version?: number | null;\n  /** Label of the prompt to be retrieved. Defaults to \"production\" if no label or version is set. */\n  label?: string | null;\n  /** The name of the prompt */\n  promptName: string;\n}\n\nexport interface ApiPromptsListParams {\n  name?: string | null;\n  label?: string | null;\n  tag?: string | null;\n  /** page number, starts at 1 */\n  page?: number | null;\n  /** limit of items per page */\n  limit?: number | null;\n  /**\n   * Optional filter to only include prompt versions created/updated on or after a certain datetime (ISO 8601)\n   * @format date-time\n   */\n  fromUpdatedAt?: string | null;\n  /**\n   * Optional filter to only include prompt versions created/updated before a certain datetime (ISO 8601)\n   * @format date-time\n   */\n  toUpdatedAt?: string | null;\n}\n\nexport interface ApiScimListUsersParams {\n  /** Filter expression (e.g. userName eq \"value\") */\n  filter?: string | null;\n  /** 1-based index of the first result to return (default 1) */\n  startIndex?: number | null;\n  /** Maximum number of results to return (default 100) */\n  count?: number | null;\n}\n\nexport interface ApiScimCreateUserPayload {\n  /** User's email address (required) */\n  userName: string;\n  /** User's name information */\n  name: ApiScimName;\n  /** User's email addresses */\n  emails?: ApiScimEmail[] | null;\n  /** Whether the user is active */\n  active?: boolean | null;\n  /** Initial password for the user */\n  password?: string | null;\n}\n\nexport interface ApiScoreConfigsGetParams {\n  /** Page number, starts at 1. */\n  page?: number | null;\n  /** Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit */\n  limit?: number | null;\n}\n\nexport interface ApiScoreV2GetParams {\n  /** Page number, starts at 1. */\n  page?: number | null;\n  /** Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit. */\n  limit?: number | null;\n  /** Retrieve only scores with this userId associated to the trace. */\n  userId?: string | null;\n  /** Retrieve only scores with this name. */\n  name?: string | null;\n  /**\n   * Optional filter to only include scores created on or after a certain datetime (ISO 8601)\n   * @format date-time\n   */\n  fromTimestamp?: string | null;\n  /**\n   * Optional filter to only include scores created before a certain datetime (ISO 8601)\n   * @format date-time\n   */\n  toTimestamp?: string | null;\n  /** Optional filter for scores where the environment is one of the provided values. */\n  environment?: (string | null)[];\n  /** Retrieve only scores from a specific source. */\n  source?: ApiScoreSource | null;\n  /** Retrieve only scores with <operator> value. */\n  operator?: string | null;\n  /**\n   * Retrieve only scores with <operator> value.\n   * @format double\n   */\n  value?: number | null;\n  /** Comma-separated list of score IDs to limit the results to. */\n  scoreIds?: string | null;\n  /** Retrieve only scores with a specific configId. */\n  configId?: string | null;\n  /** Retrieve only scores with a specific annotation queueId. */\n  queueId?: string | null;\n  /** Retrieve only scores with a specific dataType. */\n  dataType?: ApiScoreDataType | null;\n  /** Only scores linked to traces that include all of these tags will be returned. */\n  traceTags?: (string | null)[];\n}\n\nexport interface ApiSessionsListParams {\n  /** Page number, starts at 1 */\n  page?: number | null;\n  /** Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit. */\n  limit?: number | null;\n  /**\n   * Optional filter to only include sessions created on or after a certain datetime (ISO 8601)\n   * @format date-time\n   */\n  fromTimestamp?: string | null;\n  /**\n   * Optional filter to only include sessions created before a certain datetime (ISO 8601)\n   * @format date-time\n   */\n  toTimestamp?: string | null;\n  /** Optional filter for sessions where the environment is one of the provided values. */\n  environment?: (string | null)[];\n}\n\nexport interface ApiTraceListParams {\n  /** Page number, starts at 1 */\n  page?: number | null;\n  /** Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit. */\n  limit?: number | null;\n  userId?: string | null;\n  name?: string | null;\n  sessionId?: string | null;\n  /**\n   * Optional filter to only include traces with a trace.timestamp on or after a certain datetime (ISO 8601)\n   * @format date-time\n   */\n  fromTimestamp?: string | null;\n  /**\n   * Optional filter to only include traces with a trace.timestamp before a certain datetime (ISO 8601)\n   * @format date-time\n   */\n  toTimestamp?: string | null;\n  /** Format of the string [field].[asc/desc]. Fields: id, timestamp, name, userId, release, version, public, bookmarked, sessionId. Example: timestamp.asc */\n  orderBy?: string | null;\n  /** Only traces that include all of these tags will be returned. */\n  tags?: (string | null)[];\n  /** Optional filter to only include traces with a certain version. */\n  version?: string | null;\n  /** Optional filter to only include traces with a certain release. */\n  release?: string | null;\n  /** Optional filter for traces where the environment is one of the provided values. */\n  environment?: (string | null)[];\n  /** Comma-separated list of fields to include in the response. Available field groups are 'core' (always included), 'io' (input, output, metadata), 'scores', 'observations', 'metrics'. If not provided, all fields are included. Example: 'core,scores,metrics' */\n  fields?: string | null;\n}\n\nexport interface ApiTraceDeleteMultiplePayload {\n  /** List of trace IDs to delete */\n  traceIds: string[];\n}\n\nexport type QueryParamsType = Record<string | number, any>;\nexport type ResponseFormat = keyof Omit<Body, \"body\" | \"bodyUsed\">;\n\nexport interface FullRequestParams extends Omit<RequestInit, \"body\"> {\n  /** set parameter to `true` for call `securityWorker` for this request */\n  secure?: boolean;\n  /** request path */\n  path: string;\n  /** content type of request body */\n  type?: ContentType;\n  /** query params */\n  query?: QueryParamsType;\n  /** format of response (i.e. response.json() -> format: \"json\") */\n  format?: ResponseFormat;\n  /** request body */\n  body?: unknown;\n  /** base url */\n  baseUrl?: string;\n  /** request cancellation token */\n  cancelToken?: CancelToken;\n}\n\nexport type RequestParams = Omit<FullRequestParams, \"body\" | \"method\" | \"query\" | \"path\">;\n\nexport interface ApiConfig<SecurityDataType = unknown> {\n  baseUrl?: string;\n  baseApiParams?: Omit<RequestParams, \"baseUrl\" | \"cancelToken\" | \"signal\">;\n  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;\n  customFetch?: typeof fetch;\n}\n\nexport interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {\n  data: D;\n  error: E;\n}\n\ntype CancelToken = Symbol | string | number;\n\nexport enum ContentType {\n  Json = \"application/json\",\n  FormData = \"multipart/form-data\",\n  UrlEncoded = \"application/x-www-form-urlencoded\",\n  Text = \"text/plain\",\n}\n\nexport class HttpClient<SecurityDataType = unknown> {\n  public baseUrl: string = \"\";\n  private securityData: SecurityDataType | null = null;\n  private securityWorker?: ApiConfig<SecurityDataType>[\"securityWorker\"];\n  private abortControllers = new Map<CancelToken, AbortController>();\n  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);\n\n  private baseApiParams: RequestParams = {\n    credentials: \"same-origin\",\n    headers: {},\n    redirect: \"follow\",\n    referrerPolicy: \"no-referrer\",\n  };\n\n  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {\n    Object.assign(this, apiConfig);\n  }\n\n  public setSecurityData = (data: SecurityDataType | null) => {\n    this.securityData = data;\n  };\n\n  protected encodeQueryParam(key: string, value: any) {\n    const encodedKey = encodeURIComponent(key);\n    return `${encodedKey}=${encodeURIComponent(typeof value === \"number\" ? value : `${value}`)}`;\n  }\n\n  protected addQueryParam(query: QueryParamsType, key: string) {\n    return this.encodeQueryParam(key, query[key]);\n  }\n\n  protected addArrayQueryParam(query: QueryParamsType, key: string) {\n    const value = query[key];\n    return value.map((v: any) => this.encodeQueryParam(key, v)).join(\"&\");\n  }\n\n  protected toQueryString(rawQuery?: QueryParamsType): string {\n    const query = rawQuery || {};\n    const keys = Object.keys(query).filter((key) => \"undefined\" !== typeof query[key]);\n    return keys\n      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))\n      .join(\"&\");\n  }\n\n  protected addQueryParams(rawQuery?: QueryParamsType): string {\n    const queryString = this.toQueryString(rawQuery);\n    return queryString ? `?${queryString}` : \"\";\n  }\n\n  private contentFormatters: Record<ContentType, (input: any) => any> = {\n    [ContentType.Json]: (input: any) =>\n      input !== null && (typeof input === \"object\" || typeof input === \"string\") ? JSON.stringify(input) : input,\n    [ContentType.Text]: (input: any) => (input !== null && typeof input !== \"string\" ? JSON.stringify(input) : input),\n    [ContentType.FormData]: (input: any) =>\n      Object.keys(input || {}).reduce((formData, key) => {\n        const property = input[key];\n        formData.append(\n          key,\n          property instanceof Blob\n            ? property\n            : typeof property === \"object\" && property !== null\n              ? JSON.stringify(property)\n              : `${property}`\n        );\n        return formData;\n      }, new FormData()),\n    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),\n  };\n\n  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {\n    return {\n      ...this.baseApiParams,\n      ...params1,\n      ...(params2 || {}),\n      headers: {\n        ...(this.baseApiParams.headers || {}),\n        ...(params1.headers || {}),\n        ...((params2 && params2.headers) || {}),\n      },\n    };\n  }\n\n  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {\n    if (this.abortControllers.has(cancelToken)) {\n      const abortController = this.abortControllers.get(cancelToken);\n      if (abortController) {\n        return abortController.signal;\n      }\n      return void 0;\n    }\n\n    const abortController = new AbortController();\n    this.abortControllers.set(cancelToken, abortController);\n    return abortController.signal;\n  };\n\n  public abortRequest = (cancelToken: CancelToken) => {\n    const abortController = this.abortControllers.get(cancelToken);\n\n    if (abortController) {\n      abortController.abort();\n      this.abortControllers.delete(cancelToken);\n    }\n  };\n\n  public request = async <T = any, E = any>({\n    body,\n    secure,\n    path,\n    type,\n    query,\n    format,\n    baseUrl,\n    cancelToken,\n    ...params\n  }: FullRequestParams): Promise<T> => {\n    const secureParams =\n      ((typeof secure === \"boolean\" ? secure : this.baseApiParams.secure) &&\n        this.securityWorker &&\n        (await this.securityWorker(this.securityData))) ||\n      {};\n    const requestParams = this.mergeRequestParams(params, secureParams);\n    const queryString = query && this.toQueryString(query);\n    const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n    const responseFormat = format || requestParams.format;\n\n    return this.customFetch(`${baseUrl || this.baseUrl || \"\"}${path}${queryString ? `?${queryString}` : \"\"}`, {\n      ...requestParams,\n      headers: {\n        ...(requestParams.headers || {}),\n        ...(type && type !== ContentType.FormData ? { \"Content-Type\": type } : {}),\n      },\n      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,\n      body: typeof body === \"undefined\" || body === null ? null : payloadFormatter(body),\n    }).then(async (response) => {\n      const r = response.clone() as HttpResponse<T, E>;\n      r.data = null as unknown as T;\n      r.error = null as unknown as E;\n\n      const data = !responseFormat\n        ? r\n        : await response[responseFormat]()\n            .then((data) => {\n              if (r.ok) {\n                r.data = data;\n              } else {\n                r.error = data;\n              }\n              return r;\n            })\n            .catch((e) => {\n              r.error = e;\n              return r;\n            });\n\n      if (cancelToken) {\n        this.abortControllers.delete(cancelToken);\n      }\n\n      if (!response.ok) throw data;\n      return data.data;\n    });\n  };\n}\n\n/**\n * @title langfuse\n *\n * ## Authentication\n *\n * Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:\n *\n * - username: Langfuse Public Key\n * - password: Langfuse Secret Key\n *\n * ## Exports\n *\n * - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml\n * - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json\n */\nexport class LangfusePublicApi<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {\n  api = {\n    /**\n     * @description Add an item to an annotation queue\n     *\n     * @tags AnnotationQueues\n     * @name AnnotationQueuesCreateQueueItem\n     * @request POST:/api/public/annotation-queues/{queueId}/items\n     * @secure\n     */\n    annotationQueuesCreateQueueItem: (\n      queueId: string,\n      data: ApiCreateAnnotationQueueItemRequest,\n      params: RequestParams = {}\n    ) =>\n      this.request<ApiAnnotationQueueItem, any>({\n        path: `/api/public/annotation-queues/${queueId}/items`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Remove an item from an annotation queue\n     *\n     * @tags AnnotationQueues\n     * @name AnnotationQueuesDeleteQueueItem\n     * @request DELETE:/api/public/annotation-queues/{queueId}/items/{itemId}\n     * @secure\n     */\n    annotationQueuesDeleteQueueItem: (queueId: string, itemId: string, params: RequestParams = {}) =>\n      this.request<ApiDeleteAnnotationQueueItemResponse, any>({\n        path: `/api/public/annotation-queues/${queueId}/items/${itemId}`,\n        method: \"DELETE\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get an annotation queue by ID\n     *\n     * @tags AnnotationQueues\n     * @name AnnotationQueuesGetQueue\n     * @request GET:/api/public/annotation-queues/{queueId}\n     * @secure\n     */\n    annotationQueuesGetQueue: (queueId: string, params: RequestParams = {}) =>\n      this.request<ApiAnnotationQueue, any>({\n        path: `/api/public/annotation-queues/${queueId}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a specific item from an annotation queue\n     *\n     * @tags AnnotationQueues\n     * @name AnnotationQueuesGetQueueItem\n     * @request GET:/api/public/annotation-queues/{queueId}/items/{itemId}\n     * @secure\n     */\n    annotationQueuesGetQueueItem: (queueId: string, itemId: string, params: RequestParams = {}) =>\n      this.request<ApiAnnotationQueueItem, any>({\n        path: `/api/public/annotation-queues/${queueId}/items/${itemId}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get items for a specific annotation queue\n     *\n     * @tags AnnotationQueues\n     * @name AnnotationQueuesListQueueItems\n     * @request GET:/api/public/annotation-queues/{queueId}/items\n     * @secure\n     */\n    annotationQueuesListQueueItems: (\n      { queueId, ...query }: ApiAnnotationQueuesListQueueItemsParams,\n      params: RequestParams = {}\n    ) =>\n      this.request<ApiPaginatedAnnotationQueueItems, any>({\n        path: `/api/public/annotation-queues/${queueId}/items`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get all annotation queues\n     *\n     * @tags AnnotationQueues\n     * @name AnnotationQueuesListQueues\n     * @request GET:/api/public/annotation-queues\n     * @secure\n     */\n    annotationQueuesListQueues: (query: ApiAnnotationQueuesListQueuesParams, params: RequestParams = {}) =>\n      this.request<ApiPaginatedAnnotationQueues, any>({\n        path: `/api/public/annotation-queues`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Update an annotation queue item\n     *\n     * @tags AnnotationQueues\n     * @name AnnotationQueuesUpdateQueueItem\n     * @request PATCH:/api/public/annotation-queues/{queueId}/items/{itemId}\n     * @secure\n     */\n    annotationQueuesUpdateQueueItem: (\n      queueId: string,\n      itemId: string,\n      data: ApiUpdateAnnotationQueueItemRequest,\n      params: RequestParams = {}\n    ) =>\n      this.request<ApiAnnotationQueueItem, any>({\n        path: `/api/public/annotation-queues/${queueId}/items/${itemId}`,\n        method: \"PATCH\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create a comment. Comments may be attached to different object types (trace, observation, session, prompt).\n     *\n     * @tags Comments\n     * @name CommentsCreate\n     * @request POST:/api/public/comments\n     * @secure\n     */\n    commentsCreate: (data: ApiCreateCommentRequest, params: RequestParams = {}) =>\n      this.request<ApiCreateCommentResponse, any>({\n        path: `/api/public/comments`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get all comments\n     *\n     * @tags Comments\n     * @name CommentsGet\n     * @request GET:/api/public/comments\n     * @secure\n     */\n    commentsGet: (query: ApiCommentsGetParams, params: RequestParams = {}) =>\n      this.request<ApiGetCommentsResponse, any>({\n        path: `/api/public/comments`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a comment by id\n     *\n     * @tags Comments\n     * @name CommentsGetById\n     * @request GET:/api/public/comments/{commentId}\n     * @secure\n     */\n    commentsGetById: (commentId: string, params: RequestParams = {}) =>\n      this.request<ApiComment, any>({\n        path: `/api/public/comments/${commentId}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create a dataset item\n     *\n     * @tags DatasetItems\n     * @name DatasetItemsCreate\n     * @request POST:/api/public/dataset-items\n     * @secure\n     */\n    datasetItemsCreate: (data: ApiCreateDatasetItemRequest, params: RequestParams = {}) =>\n      this.request<ApiDatasetItem, any>({\n        path: `/api/public/dataset-items`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Delete a dataset item and all its run items. This action is irreversible.\n     *\n     * @tags DatasetItems\n     * @name DatasetItemsDelete\n     * @request DELETE:/api/public/dataset-items/{id}\n     * @secure\n     */\n    datasetItemsDelete: (id: string, params: RequestParams = {}) =>\n      this.request<ApiDeleteDatasetItemResponse, any>({\n        path: `/api/public/dataset-items/${id}`,\n        method: \"DELETE\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a dataset item\n     *\n     * @tags DatasetItems\n     * @name DatasetItemsGet\n     * @request GET:/api/public/dataset-items/{id}\n     * @secure\n     */\n    datasetItemsGet: (id: string, params: RequestParams = {}) =>\n      this.request<ApiDatasetItem, any>({\n        path: `/api/public/dataset-items/${id}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get dataset items\n     *\n     * @tags DatasetItems\n     * @name DatasetItemsList\n     * @request GET:/api/public/dataset-items\n     * @secure\n     */\n    datasetItemsList: (query: ApiDatasetItemsListParams, params: RequestParams = {}) =>\n      this.request<ApiPaginatedDatasetItems, any>({\n        path: `/api/public/dataset-items`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create a dataset run item\n     *\n     * @tags DatasetRunItems\n     * @name DatasetRunItemsCreate\n     * @request POST:/api/public/dataset-run-items\n     * @secure\n     */\n    datasetRunItemsCreate: (data: ApiCreateDatasetRunItemRequest, params: RequestParams = {}) =>\n      this.request<ApiDatasetRunItem, any>({\n        path: `/api/public/dataset-run-items`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description List dataset run items\n     *\n     * @tags DatasetRunItems\n     * @name DatasetRunItemsList\n     * @request GET:/api/public/dataset-run-items\n     * @secure\n     */\n    datasetRunItemsList: (query: ApiDatasetRunItemsListParams, params: RequestParams = {}) =>\n      this.request<void, any>({\n        path: `/api/public/dataset-run-items`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * @description Create a dataset\n     *\n     * @tags Datasets\n     * @name DatasetsCreate\n     * @request POST:/api/public/v2/datasets\n     * @secure\n     */\n    datasetsCreate: (data: ApiCreateDatasetRequest, params: RequestParams = {}) =>\n      this.request<ApiDataset, any>({\n        path: `/api/public/v2/datasets`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Delete a dataset run and all its run items. This action is irreversible.\n     *\n     * @tags Datasets\n     * @name DatasetsDeleteRun\n     * @request DELETE:/api/public/datasets/{datasetName}/runs/{runName}\n     * @secure\n     */\n    datasetsDeleteRun: (datasetName: string, runName: string, params: RequestParams = {}) =>\n      this.request<ApiDeleteDatasetRunResponse, any>({\n        path: `/api/public/datasets/${datasetName}/runs/${runName}`,\n        method: \"DELETE\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a dataset\n     *\n     * @tags Datasets\n     * @name DatasetsGet\n     * @request GET:/api/public/v2/datasets/{datasetName}\n     * @secure\n     */\n    datasetsGet: (datasetName: string, params: RequestParams = {}) =>\n      this.request<ApiDataset, any>({\n        path: `/api/public/v2/datasets/${datasetName}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a dataset run and its items\n     *\n     * @tags Datasets\n     * @name DatasetsGetRun\n     * @request GET:/api/public/datasets/{datasetName}/runs/{runName}\n     * @secure\n     */\n    datasetsGetRun: (datasetName: string, runName: string, params: RequestParams = {}) =>\n      this.request<ApiDatasetRunWithItems, any>({\n        path: `/api/public/datasets/${datasetName}/runs/${runName}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get dataset runs\n     *\n     * @tags Datasets\n     * @name DatasetsGetRuns\n     * @request GET:/api/public/datasets/{datasetName}/runs\n     * @secure\n     */\n    datasetsGetRuns: ({ datasetName, ...query }: ApiDatasetsGetRunsParams, params: RequestParams = {}) =>\n      this.request<ApiPaginatedDatasetRuns, any>({\n        path: `/api/public/datasets/${datasetName}/runs`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get all datasets\n     *\n     * @tags Datasets\n     * @name DatasetsList\n     * @request GET:/api/public/v2/datasets\n     * @secure\n     */\n    datasetsList: (query: ApiDatasetsListParams, params: RequestParams = {}) =>\n      this.request<ApiPaginatedDatasets, any>({\n        path: `/api/public/v2/datasets`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Check health of API and database\n     *\n     * @tags Health\n     * @name HealthHealth\n     * @request GET:/api/public/health\n     */\n    healthHealth: (params: RequestParams = {}) =>\n      this.request<ApiHealthResponse, void>({\n        path: `/api/public/health`,\n        method: \"GET\",\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Batched ingestion for Langfuse Tracing. If you want to use tracing via the API, such as to build your own Langfuse client implementation, this is the only API route you need to implement. Within each batch, there can be multiple events. Each event has a type, an id, a timestamp, metadata and a body. Internally, we refer to this as the \"event envelope\" as it tells us something about the event but not the trace. We use the event id within this envelope to deduplicate messages to avoid processing the same event twice, i.e. the event id should be unique per request. The event.body.id is the ID of the actual trace and will be used for updates and will be visible within the Langfuse App. I.e. if you want to update a trace, you'd use the same body id, but separate event IDs. Notes: - Introduction to data model: https://langfuse.com/docs/tracing-data-model - Batch sizes are limited to 3.5 MB in total. You need to adjust the number of events per batch accordingly. - The API does not return a 4xx status code for input errors. Instead, it responds with a 207 status code, which includes a list of the encountered errors.\n     *\n     * @tags Ingestion\n     * @name IngestionBatch\n     * @request POST:/api/public/ingestion\n     * @secure\n     */\n    ingestionBatch: (data: ApiIngestionBatchPayload, params: RequestParams = {}) =>\n      this.request<ApiIngestionResponse, any>({\n        path: `/api/public/ingestion`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a media record\n     *\n     * @tags Media\n     * @name MediaGet\n     * @request GET:/api/public/media/{mediaId}\n     * @secure\n     */\n    mediaGet: (mediaId: string, params: RequestParams = {}) =>\n      this.request<ApiGetMediaResponse, any>({\n        path: `/api/public/media/${mediaId}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a presigned upload URL for a media record\n     *\n     * @tags Media\n     * @name MediaGetUploadUrl\n     * @request POST:/api/public/media\n     * @secure\n     */\n    mediaGetUploadUrl: (data: ApiGetMediaUploadUrlRequest, params: RequestParams = {}) =>\n      this.request<ApiGetMediaUploadUrlResponse, any>({\n        path: `/api/public/media`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Patch a media record\n     *\n     * @tags Media\n     * @name MediaPatch\n     * @request PATCH:/api/public/media/{mediaId}\n     * @secure\n     */\n    mediaPatch: (mediaId: string, data: ApiPatchMediaBody, params: RequestParams = {}) =>\n      this.request<void, any>({\n        path: `/api/public/media/${mediaId}`,\n        method: \"PATCH\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        ...params,\n      }),\n\n    /**\n     * @description Get metrics from the Langfuse project using a query object\n     *\n     * @tags Metrics\n     * @name MetricsMetrics\n     * @request GET:/api/public/metrics\n     * @secure\n     */\n    metricsMetrics: (query: ApiMetricsMetricsParams, params: RequestParams = {}) =>\n      this.request<ApiMetricsResponse, any>({\n        path: `/api/public/metrics`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create a model\n     *\n     * @tags Models\n     * @name ModelsCreate\n     * @request POST:/api/public/models\n     * @secure\n     */\n    modelsCreate: (data: ApiCreateModelRequest, params: RequestParams = {}) =>\n      this.request<ApiModel, any>({\n        path: `/api/public/models`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Delete a model. Cannot delete models managed by Langfuse. You can create your own definition with the same modelName to override the definition though.\n     *\n     * @tags Models\n     * @name ModelsDelete\n     * @request DELETE:/api/public/models/{id}\n     * @secure\n     */\n    modelsDelete: (id: string, params: RequestParams = {}) =>\n      this.request<void, any>({\n        path: `/api/public/models/${id}`,\n        method: \"DELETE\",\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * @description Get a model\n     *\n     * @tags Models\n     * @name ModelsGet\n     * @request GET:/api/public/models/{id}\n     * @secure\n     */\n    modelsGet: (id: string, params: RequestParams = {}) =>\n      this.request<ApiModel, any>({\n        path: `/api/public/models/${id}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get all models\n     *\n     * @tags Models\n     * @name ModelsList\n     * @request GET:/api/public/models\n     * @secure\n     */\n    modelsList: (query: ApiModelsListParams, params: RequestParams = {}) =>\n      this.request<ApiPaginatedModels, any>({\n        path: `/api/public/models`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a observation\n     *\n     * @tags Observations\n     * @name ObservationsGet\n     * @request GET:/api/public/observations/{observationId}\n     * @secure\n     */\n    observationsGet: (observationId: string, params: RequestParams = {}) =>\n      this.request<ApiObservationsView, any>({\n        path: `/api/public/observations/${observationId}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a list of observations\n     *\n     * @tags Observations\n     * @name ObservationsGetMany\n     * @request GET:/api/public/observations\n     * @secure\n     */\n    observationsGetMany: (query: ApiObservationsGetManyParams, params: RequestParams = {}) =>\n      this.request<ApiObservationsViews, any>({\n        path: `/api/public/observations`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get all memberships for the organization associated with the API key (requires organization-scoped API key)\n     *\n     * @tags Organizations\n     * @name OrganizationsGetOrganizationMemberships\n     * @request GET:/api/public/organizations/memberships\n     * @secure\n     */\n    organizationsGetOrganizationMemberships: (params: RequestParams = {}) =>\n      this.request<ApiMembershipsResponse, any>({\n        path: `/api/public/organizations/memberships`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get all projects for the organization associated with the API key (requires organization-scoped API key)\n     *\n     * @tags Organizations\n     * @name OrganizationsGetOrganizationProjects\n     * @request GET:/api/public/organizations/projects\n     * @secure\n     */\n    organizationsGetOrganizationProjects: (params: RequestParams = {}) =>\n      this.request<ApiOrganizationProjectsResponse, any>({\n        path: `/api/public/organizations/projects`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get all memberships for a specific project (requires organization-scoped API key)\n     *\n     * @tags Organizations\n     * @name OrganizationsGetProjectMemberships\n     * @request GET:/api/public/projects/{projectId}/memberships\n     * @secure\n     */\n    organizationsGetProjectMemberships: (projectId: string, params: RequestParams = {}) =>\n      this.request<ApiMembershipsResponse, any>({\n        path: `/api/public/projects/${projectId}/memberships`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create or update a membership for the organization associated with the API key (requires organization-scoped API key)\n     *\n     * @tags Organizations\n     * @name OrganizationsUpdateOrganizationMembership\n     * @request PUT:/api/public/organizations/memberships\n     * @secure\n     */\n    organizationsUpdateOrganizationMembership: (data: ApiMembershipRequest, params: RequestParams = {}) =>\n      this.request<ApiMembershipResponse, any>({\n        path: `/api/public/organizations/memberships`,\n        method: \"PUT\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create or update a membership for a specific project (requires organization-scoped API key). The user must already be a member of the organization.\n     *\n     * @tags Organizations\n     * @name OrganizationsUpdateProjectMembership\n     * @request PUT:/api/public/projects/{projectId}/memberships\n     * @secure\n     */\n    organizationsUpdateProjectMembership: (projectId: string, data: ApiMembershipRequest, params: RequestParams = {}) =>\n      this.request<ApiMembershipResponse, any>({\n        path: `/api/public/projects/${projectId}/memberships`,\n        method: \"PUT\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create a new project (requires organization-scoped API key)\n     *\n     * @tags Projects\n     * @name ProjectsCreate\n     * @request POST:/api/public/projects\n     * @secure\n     */\n    projectsCreate: (data: ApiProjectsCreatePayload, params: RequestParams = {}) =>\n      this.request<ApiProject, any>({\n        path: `/api/public/projects`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create a new API key for a project (requires organization-scoped API key)\n     *\n     * @tags Projects\n     * @name ProjectsCreateApiKey\n     * @request POST:/api/public/projects/{projectId}/apiKeys\n     * @secure\n     */\n    projectsCreateApiKey: (projectId: string, data: ApiProjectsCreateApiKeyPayload, params: RequestParams = {}) =>\n      this.request<ApiApiKeyResponse, any>({\n        path: `/api/public/projects/${projectId}/apiKeys`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Delete a project by ID (requires organization-scoped API key). Project deletion is processed asynchronously.\n     *\n     * @tags Projects\n     * @name ProjectsDelete\n     * @request DELETE:/api/public/projects/{projectId}\n     * @secure\n     */\n    projectsDelete: (projectId: string, params: RequestParams = {}) =>\n      this.request<ApiProjectDeletionResponse, any>({\n        path: `/api/public/projects/${projectId}`,\n        method: \"DELETE\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Delete an API key for a project (requires organization-scoped API key)\n     *\n     * @tags Projects\n     * @name ProjectsDeleteApiKey\n     * @request DELETE:/api/public/projects/{projectId}/apiKeys/{apiKeyId}\n     * @secure\n     */\n    projectsDeleteApiKey: (projectId: string, apiKeyId: string, params: RequestParams = {}) =>\n      this.request<ApiApiKeyDeletionResponse, any>({\n        path: `/api/public/projects/${projectId}/apiKeys/${apiKeyId}`,\n        method: \"DELETE\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get Project associated with API key\n     *\n     * @tags Projects\n     * @name ProjectsGet\n     * @request GET:/api/public/projects\n     * @secure\n     */\n    projectsGet: (params: RequestParams = {}) =>\n      this.request<ApiProjects, any>({\n        path: `/api/public/projects`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get all API keys for a project (requires organization-scoped API key)\n     *\n     * @tags Projects\n     * @name ProjectsGetApiKeys\n     * @request GET:/api/public/projects/{projectId}/apiKeys\n     * @secure\n     */\n    projectsGetApiKeys: (projectId: string, params: RequestParams = {}) =>\n      this.request<ApiApiKeyList, any>({\n        path: `/api/public/projects/${projectId}/apiKeys`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Update a project by ID (requires organization-scoped API key).\n     *\n     * @tags Projects\n     * @name ProjectsUpdate\n     * @request PUT:/api/public/projects/{projectId}\n     * @secure\n     */\n    projectsUpdate: (projectId: string, data: ApiProjectsUpdatePayload, params: RequestParams = {}) =>\n      this.request<ApiProject, any>({\n        path: `/api/public/projects/${projectId}`,\n        method: \"PUT\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create a new version for the prompt with the given `name`\n     *\n     * @tags Prompts\n     * @name PromptsCreate\n     * @request POST:/api/public/v2/prompts\n     * @secure\n     */\n    promptsCreate: (data: ApiCreatePromptRequest, params: RequestParams = {}) =>\n      this.request<ApiPrompt, any>({\n        path: `/api/public/v2/prompts`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a prompt\n     *\n     * @tags Prompts\n     * @name PromptsGet\n     * @request GET:/api/public/v2/prompts/{promptName}\n     * @secure\n     */\n    promptsGet: ({ promptName, ...query }: ApiPromptsGetParams, params: RequestParams = {}) =>\n      this.request<ApiPrompt, any>({\n        path: `/api/public/v2/prompts/${promptName}`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a list of prompt names with versions and labels\n     *\n     * @tags Prompts\n     * @name PromptsList\n     * @request GET:/api/public/v2/prompts\n     * @secure\n     */\n    promptsList: (query: ApiPromptsListParams, params: RequestParams = {}) =>\n      this.request<ApiPromptMetaListResponse, any>({\n        path: `/api/public/v2/prompts`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Update labels for a specific prompt version\n     *\n     * @tags PromptVersion\n     * @name PromptVersionUpdate\n     * @request PATCH:/api/public/v2/prompts/{name}/versions/{version}\n     * @secure\n     */\n    promptVersionUpdate: (\n      name: string,\n      version: number,\n      data: ApiPromptVersionUpdatePayload,\n      params: RequestParams = {}\n    ) =>\n      this.request<ApiPrompt, any>({\n        path: `/api/public/v2/prompts/${name}/versions/${version}`,\n        method: \"PATCH\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create a new user in the organization (requires organization-scoped API key)\n     *\n     * @tags Scim\n     * @name ScimCreateUser\n     * @request POST:/api/public/scim/Users\n     * @secure\n     */\n    scimCreateUser: (data: ApiScimCreateUserPayload, params: RequestParams = {}) =>\n      this.request<ApiScimUser, any>({\n        path: `/api/public/scim/Users`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Remove a user from the organization (requires organization-scoped API key). Note that this only removes the user from the organization but does not delete the user entity itself.\n     *\n     * @tags Scim\n     * @name ScimDeleteUser\n     * @request DELETE:/api/public/scim/Users/{userId}\n     * @secure\n     */\n    scimDeleteUser: (userId: string, params: RequestParams = {}) =>\n      this.request<ApiEmptyResponse, any>({\n        path: `/api/public/scim/Users/${userId}`,\n        method: \"DELETE\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get SCIM Resource Types (requires organization-scoped API key)\n     *\n     * @tags Scim\n     * @name ScimGetResourceTypes\n     * @request GET:/api/public/scim/ResourceTypes\n     * @secure\n     */\n    scimGetResourceTypes: (params: RequestParams = {}) =>\n      this.request<ApiResourceTypesResponse, any>({\n        path: `/api/public/scim/ResourceTypes`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get SCIM Schemas (requires organization-scoped API key)\n     *\n     * @tags Scim\n     * @name ScimGetSchemas\n     * @request GET:/api/public/scim/Schemas\n     * @secure\n     */\n    scimGetSchemas: (params: RequestParams = {}) =>\n      this.request<ApiSchemasResponse, any>({\n        path: `/api/public/scim/Schemas`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get SCIM Service Provider Configuration (requires organization-scoped API key)\n     *\n     * @tags Scim\n     * @name ScimGetServiceProviderConfig\n     * @request GET:/api/public/scim/ServiceProviderConfig\n     * @secure\n     */\n    scimGetServiceProviderConfig: (params: RequestParams = {}) =>\n      this.request<ApiServiceProviderConfig, any>({\n        path: `/api/public/scim/ServiceProviderConfig`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a specific user by ID (requires organization-scoped API key)\n     *\n     * @tags Scim\n     * @name ScimGetUser\n     * @request GET:/api/public/scim/Users/{userId}\n     * @secure\n     */\n    scimGetUser: (userId: string, params: RequestParams = {}) =>\n      this.request<ApiScimUser, any>({\n        path: `/api/public/scim/Users/${userId}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description List users in the organization (requires organization-scoped API key)\n     *\n     * @tags Scim\n     * @name ScimListUsers\n     * @request GET:/api/public/scim/Users\n     * @secure\n     */\n    scimListUsers: (query: ApiScimListUsersParams, params: RequestParams = {}) =>\n      this.request<ApiScimUsersListResponse, any>({\n        path: `/api/public/scim/Users`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create a score configuration (config). Score configs are used to define the structure of scores\n     *\n     * @tags ScoreConfigs\n     * @name ScoreConfigsCreate\n     * @request POST:/api/public/score-configs\n     * @secure\n     */\n    scoreConfigsCreate: (data: ApiCreateScoreConfigRequest, params: RequestParams = {}) =>\n      this.request<ApiScoreConfig, any>({\n        path: `/api/public/score-configs`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get all score configs\n     *\n     * @tags ScoreConfigs\n     * @name ScoreConfigsGet\n     * @request GET:/api/public/score-configs\n     * @secure\n     */\n    scoreConfigsGet: (query: ApiScoreConfigsGetParams, params: RequestParams = {}) =>\n      this.request<ApiScoreConfigs, any>({\n        path: `/api/public/score-configs`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a score config\n     *\n     * @tags ScoreConfigs\n     * @name ScoreConfigsGetById\n     * @request GET:/api/public/score-configs/{configId}\n     * @secure\n     */\n    scoreConfigsGetById: (configId: string, params: RequestParams = {}) =>\n      this.request<ApiScoreConfig, any>({\n        path: `/api/public/score-configs/${configId}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Create a score (supports both trace and session scores)\n     *\n     * @tags Score\n     * @name ScoreCreate\n     * @request POST:/api/public/scores\n     * @secure\n     */\n    scoreCreate: (data: ApiCreateScoreRequest, params: RequestParams = {}) =>\n      this.request<ApiCreateScoreResponse, any>({\n        path: `/api/public/scores`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Delete a score (supports both trace and session scores)\n     *\n     * @tags Score\n     * @name ScoreDelete\n     * @request DELETE:/api/public/scores/{scoreId}\n     * @secure\n     */\n    scoreDelete: (scoreId: string, params: RequestParams = {}) =>\n      this.request<void, any>({\n        path: `/api/public/scores/${scoreId}`,\n        method: \"DELETE\",\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * @description Get a list of scores (supports both trace and session scores)\n     *\n     * @tags ScoreV2\n     * @name ScoreV2Get\n     * @request GET:/api/public/v2/scores\n     * @secure\n     */\n    scoreV2Get: (query: ApiScoreV2GetParams, params: RequestParams = {}) =>\n      this.request<ApiGetScoresResponse, any>({\n        path: `/api/public/v2/scores`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a score (supports both trace and session scores)\n     *\n     * @tags ScoreV2\n     * @name ScoreV2GetById\n     * @request GET:/api/public/v2/scores/{scoreId}\n     * @secure\n     */\n    scoreV2GetById: (scoreId: string, params: RequestParams = {}) =>\n      this.request<ApiScore, any>({\n        path: `/api/public/v2/scores/${scoreId}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a session. Please note that `traces` on this endpoint are not paginated, if you plan to fetch large sessions, consider `GET /api/public/traces?sessionId=<sessionId>`\n     *\n     * @tags Sessions\n     * @name SessionsGet\n     * @request GET:/api/public/sessions/{sessionId}\n     * @secure\n     */\n    sessionsGet: (sessionId: string, params: RequestParams = {}) =>\n      this.request<ApiSessionWithTraces, any>({\n        path: `/api/public/sessions/${sessionId}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get sessions\n     *\n     * @tags Sessions\n     * @name SessionsList\n     * @request GET:/api/public/sessions\n     * @secure\n     */\n    sessionsList: (query: ApiSessionsListParams, params: RequestParams = {}) =>\n      this.request<ApiPaginatedSessions, any>({\n        path: `/api/public/sessions`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Delete a specific trace\n     *\n     * @tags Trace\n     * @name TraceDelete\n     * @request DELETE:/api/public/traces/{traceId}\n     * @secure\n     */\n    traceDelete: (traceId: string, params: RequestParams = {}) =>\n      this.request<ApiDeleteTraceResponse, any>({\n        path: `/api/public/traces/${traceId}`,\n        method: \"DELETE\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Delete multiple traces\n     *\n     * @tags Trace\n     * @name TraceDeleteMultiple\n     * @request DELETE:/api/public/traces\n     * @secure\n     */\n    traceDeleteMultiple: (data: ApiTraceDeleteMultiplePayload, params: RequestParams = {}) =>\n      this.request<ApiDeleteTraceResponse, any>({\n        path: `/api/public/traces`,\n        method: \"DELETE\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get a specific trace\n     *\n     * @tags Trace\n     * @name TraceGet\n     * @request GET:/api/public/traces/{traceId}\n     * @secure\n     */\n    traceGet: (traceId: string, params: RequestParams = {}) =>\n      this.request<ApiTraceWithFullDetails, any>({\n        path: `/api/public/traces/${traceId}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * @description Get list of traces\n     *\n     * @tags Trace\n     * @name TraceList\n     * @request GET:/api/public/traces\n     * @secure\n     */\n    traceList: (query: ApiTraceListParams, params: RequestParams = {}) =>\n      this.request<ApiTraces, any>({\n        path: `/api/public/traces`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n  };\n}\n","import {\n  LangfuseCore,\n  LangfuseWebStateless,\n  type LangfuseFetchOptions,\n  type LangfuseFetchResponse,\n  type LangfusePersistedProperty,\n  utils,\n} from \"langfuse-core\";\nimport { type LangfuseStorage, getStorage } from \"./storage\";\nimport { LangfusePublicApi } from \"./publicApi\";\nimport { version } from \"../package.json\";\nimport { type LangfuseOptions } from \"./types\";\n\nexport type * from \"./publicApi\";\nexport type {\n  LangfusePromptClient,\n  ChatPromptClient,\n  TextPromptClient,\n  LangfusePromptRecord,\n  LangfuseTraceClient,\n  LangfuseSpanClient,\n  LangfuseEventClient,\n  LangfuseGenerationClient,\n} from \"langfuse-core\";\n\n// Required when users pass these as typed arguments\nexport { LangfuseMedia } from \"langfuse-core\";\n\nexport class Langfuse extends LangfuseCore {\n  private _storage: LangfuseStorage;\n  private _storageCache: any;\n  private _storageKey: string;\n  public api: LangfusePublicApi<null>[\"api\"];\n\n  constructor(params?: { publicKey?: string; secretKey?: string } & LangfuseOptions) {\n    const langfuseConfig = utils.configLangfuseSDK(params);\n    super(langfuseConfig);\n\n    if (typeof window !== \"undefined\" && \"Deno\" in window === false) {\n      this._storageKey = params?.persistence_name\n        ? `lf_${params.persistence_name}`\n        : `lf_${langfuseConfig.publicKey}_langfuse`;\n      this._storage = getStorage(params?.persistence || \"localStorage\", window);\n    } else {\n      this._storageKey = `lf_${langfuseConfig.publicKey}_langfuse`;\n      this._storage = getStorage(\"memory\", undefined);\n    }\n\n    this.api = new LangfusePublicApi({\n      baseUrl: this.baseUrl,\n      baseApiParams: {\n        headers: {\n          \"X-Langfuse-Sdk-Name\": \"langfuse-js\",\n          \"X-Langfuse-Sdk-Version\": this.getLibraryVersion(),\n          \"X-Langfuse-Sdk-Variant\": this.getLibraryId(),\n          \"X-Langfuse-Sdk-Integration\": this.sdkIntegration,\n          \"X-Langfuse-Public-Key\": this.publicKey,\n          ...this.additionalHeaders,\n          ...this.constructAuthorizationHeader(this.publicKey, this.secretKey),\n        },\n      },\n    }).api;\n  }\n\n  getPersistedProperty<T>(key: LangfusePersistedProperty): T | undefined {\n    if (!this._storageCache) {\n      this._storageCache = JSON.parse(this._storage.getItem(this._storageKey) || \"{}\") || {};\n    }\n\n    return this._storageCache[key];\n  }\n\n  setPersistedProperty<T>(key: LangfusePersistedProperty, value: T | null): void {\n    if (!this._storageCache) {\n      this._storageCache = JSON.parse(this._storage.getItem(this._storageKey) || \"{}\") || {};\n    }\n\n    if (value === null) {\n      delete this._storageCache[key];\n    } else {\n      this._storageCache[key] = value;\n    }\n\n    this._storage.setItem(this._storageKey, JSON.stringify(this._storageCache));\n  }\n\n  fetch(url: string, options: LangfuseFetchOptions): Promise<LangfuseFetchResponse> {\n    return fetch(url, options);\n  }\n\n  getLibraryId(): string {\n    return \"langfuse\";\n  }\n\n  getLibraryVersion(): string {\n    return version;\n  }\n\n  getCustomUserAgent(): void {\n    return;\n  }\n}\n\nexport class LangfuseWeb extends LangfuseWebStateless {\n  private _storage: LangfuseStorage;\n  private _storageCache: any;\n  private _storageKey: string;\n\n  constructor(params?: Omit<LangfuseOptions, \"secretKey\">) {\n    const langfuseConfig = utils.configLangfuseSDK(params, false);\n    super(langfuseConfig);\n\n    if (typeof window !== \"undefined\") {\n      this._storageKey = params?.persistence_name\n        ? `lf_${params.persistence_name}`\n        : `lf_${langfuseConfig.publicKey}_langfuse`;\n      this._storage = getStorage(params?.persistence || \"localStorage\", window);\n    } else {\n      this._storageKey = `lf_${langfuseConfig.publicKey}_langfuse`;\n      this._storage = getStorage(\"memory\", undefined);\n    }\n  }\n\n  getPersistedProperty<T>(key: LangfusePersistedProperty): T | undefined {\n    if (!this._storageCache) {\n      this._storageCache = JSON.parse(this._storage.getItem(this._storageKey) || \"{}\") || {};\n    }\n\n    return this._storageCache[key];\n  }\n\n  setPersistedProperty<T>(key: LangfusePersistedProperty, value: T | null): void {\n    if (!this._storageCache) {\n      this._storageCache = JSON.parse(this._storage.getItem(this._storageKey) || \"{}\") || {};\n    }\n\n    if (value === null) {\n      delete this._storageCache[key];\n    } else {\n      this._storageCache[key] = value;\n    }\n\n    this._storage.setItem(this._storageKey, JSON.stringify(this._storageCache));\n  }\n\n  fetch(url: string, options: LangfuseFetchOptions): Promise<LangfuseFetchResponse> {\n    return fetch(url, options);\n  }\n\n  getLibraryId(): string {\n    return \"langfuse-frontend\";\n  }\n\n  getLibraryVersion(): string {\n    return version;\n  }\n\n  getCustomUserAgent(): void {\n    return;\n  }\n}\n","import { Langfuse } from \"../langfuse\";\nimport type { LangfuseInitParams } from \"./types\";\n\n/**\n * Represents a singleton instance of the Langfuse client.\n */\nexport class LangfuseSingleton {\n  private static instance: Langfuse | null = null; // Lazy initialization\n\n  /**\n   * Returns the singleton instance of the Langfuse client.\n   * @param params Optional parameters for initializing the Langfuse instance. Only used for the first call.\n   * @returns The singleton instance of the Langfuse client.\n   */\n  public static getInstance(params?: LangfuseInitParams): Langfuse {\n    if (!LangfuseSingleton.instance) {\n      LangfuseSingleton.instance = new Langfuse(params);\n    }\n    return LangfuseSingleton.instance;\n  }\n}\n","import type OpenAI from \"openai\";\nimport type { CreateLangfuseGenerationBody, Usage, UsageDetails } from \"langfuse-core\";\n\ntype ParsedOpenAIArguments = {\n  model: string;\n  input: Record<string, any> | string;\n  modelParameters: Record<string, any>;\n};\n\nexport const parseInputArgs = (args: Record<string, any>): ParsedOpenAIArguments => {\n  let params: Record<string, any> = {};\n  params = {\n    frequency_penalty: args.frequency_penalty,\n    logit_bias: args.logit_bias,\n    logprobs: args.logprobs,\n    max_tokens: args.max_tokens,\n    n: args.n,\n    presence_penalty: args.presence_penalty,\n    seed: args.seed,\n    stop: args.stop,\n    stream: args.stream,\n    temperature: args.temperature,\n    top_p: args.top_p,\n    user: args.user,\n    response_format: args.response_format,\n    top_logprobs: args.top_logprobs,\n  };\n\n  let input: Record<string, any> | string = args.input;\n\n  if (args && typeof args === \"object\" && !Array.isArray(args) && \"messages\" in args) {\n    input = {};\n    input.messages = args.messages;\n    if (\"function_call\" in args) {\n      input.function_call = args.function_call;\n    }\n    if (\"functions\" in args) {\n      input.functions = args.functions;\n    }\n    if (\"tools\" in args) {\n      input.tools = args.tools;\n    }\n\n    if (\"tool_choice\" in args) {\n      input.tool_choice = args.tool_choice;\n    }\n  } else if (!input) {\n    input = args.prompt;\n  }\n\n  return {\n    model: args.model,\n    input: input,\n    modelParameters: params,\n  };\n};\n\nexport const parseCompletionOutput = (res: unknown): CreateLangfuseGenerationBody[\"output\"] => {\n  if (res instanceof Object && \"output_text\" in res && res[\"output_text\"] !== \"\") {\n    return res[\"output_text\"] as string;\n  }\n\n  if (typeof res === \"object\" && res && \"output\" in res && Array.isArray(res[\"output\"])) {\n    const output = res[\"output\"];\n\n    if (output.length > 1) {\n      return output;\n    }\n    if (output.length === 1) {\n      return output[0] as Record<string, unknown>;\n    }\n\n    return null;\n  }\n\n  if (!(res instanceof Object && \"choices\" in res && Array.isArray(res.choices))) {\n    return \"\";\n  }\n\n  return \"message\" in res.choices[0] ? res.choices[0].message : res.choices[0].text ?? \"\";\n};\n\nexport const parseUsage = (res: unknown): Usage | undefined => {\n  if (hasCompletionUsage(res)) {\n    const { prompt_tokens, completion_tokens, total_tokens } = res.usage;\n\n    return {\n      input: prompt_tokens,\n      output: completion_tokens,\n      total: total_tokens,\n    };\n  }\n};\n\nexport const parseUsageDetails = (completionUsage: OpenAI.CompletionUsage): UsageDetails | undefined => {\n  if (\"prompt_tokens\" in completionUsage) {\n    const { prompt_tokens, completion_tokens, total_tokens, completion_tokens_details, prompt_tokens_details } =\n      completionUsage;\n\n    return {\n      input: prompt_tokens,\n      output: completion_tokens,\n      total: total_tokens,\n      ...Object.fromEntries(\n        Object.entries(prompt_tokens_details ?? {}).map(([key, value]) => [`input_${key}`, value as number])\n      ),\n      ...Object.fromEntries(\n        Object.entries(completion_tokens_details ?? {}).map(([key, value]) => [`output_${key}`, value as number])\n      ),\n    };\n  } else if (\"input_tokens\" in completionUsage) {\n    const { input_tokens, output_tokens, total_tokens, input_tokens_details, output_tokens_details } = completionUsage;\n\n    return {\n      input: input_tokens,\n      output: output_tokens,\n      total: total_tokens,\n      ...Object.fromEntries(\n        Object.entries(input_tokens_details ?? {}).map(([key, value]) => [`input_${key}`, value as number])\n      ),\n      ...Object.fromEntries(\n        Object.entries(output_tokens_details ?? {}).map(([key, value]) => [`output_${key}`, value as number])\n      ),\n    };\n  }\n};\n\nexport const parseUsageDetailsFromResponse = (res: unknown): UsageDetails | undefined => {\n  if (hasCompletionUsage(res)) {\n    return parseUsageDetails(res.usage);\n  }\n};\n\nexport const parseChunk = (\n  rawChunk: unknown\n):\n  | { isToolCall: false; data: string }\n  | { isToolCall: true; data: OpenAI.Chat.Completions.ChatCompletionChunk.Choice.Delta.ToolCall } => {\n  let isToolCall = false;\n  const _chunk = rawChunk as OpenAI.ChatCompletionChunk | OpenAI.Completions.Completion;\n  const chunkData = _chunk?.choices?.[0];\n\n  try {\n    if (\"delta\" in chunkData && \"tool_calls\" in chunkData.delta && Array.isArray(chunkData.delta.tool_calls)) {\n      isToolCall = true;\n\n      return { isToolCall, data: chunkData.delta.tool_calls[0] };\n    }\n    if (\"delta\" in chunkData) {\n      return { isToolCall, data: chunkData.delta?.content || \"\" };\n    }\n\n    if (\"text\" in chunkData) {\n      return { isToolCall, data: chunkData.text || \"\" };\n    }\n  } catch (e) {}\n\n  return { isToolCall: false, data: \"\" };\n};\n\n// Type guard to check if an unknown object is a UsageResponse\nfunction hasCompletionUsage(obj: any): obj is { usage: OpenAI.CompletionUsage } {\n  return (\n    obj instanceof Object &&\n    \"usage\" in obj &&\n    obj.usage instanceof Object &&\n    // Completion API Usage format\n    ((typeof obj.usage.prompt_tokens === \"number\" &&\n      typeof obj.usage.completion_tokens === \"number\" &&\n      typeof obj.usage.total_tokens === \"number\") ||\n      // Response API Usage format\n      (typeof obj.usage.input_tokens === \"number\" &&\n        typeof obj.usage.output_tokens === \"number\" &&\n        typeof obj.usage.total_tokens === \"number\"))\n  );\n}\n\nexport const getToolCallOutput = (\n  toolCallChunks: OpenAI.Chat.Completions.ChatCompletionChunk.Choice.Delta.ToolCall[]\n): {\n  tool_calls: {\n    function: {\n      name: string;\n      arguments: string;\n    };\n  }[];\n} => {\n  let name = \"\";\n  let toolArguments = \"\";\n\n  for (const toolCall of toolCallChunks) {\n    name = toolCall.function?.name || name;\n    toolArguments += toolCall.function?.arguments || \"\";\n  }\n\n  return {\n    tool_calls: [\n      {\n        function: {\n          name,\n          arguments: toolArguments,\n        },\n      },\n    ],\n  };\n};\n\nexport const parseModelDataFromResponse = (\n  res: unknown\n): {\n  model: string | undefined;\n  modelParameters: Record<string, string | number> | undefined;\n  metadata: Record<string, unknown> | undefined;\n} => {\n  if (typeof res !== \"object\" || res === null) {\n    return {\n      model: undefined,\n      modelParameters: undefined,\n      metadata: undefined,\n    };\n  }\n\n  const model = \"model\" in res ? (res[\"model\"] as string) : undefined;\n  const modelParameters: Record<string, string | number> = {};\n  const modelParamKeys = [\n    \"max_output_tokens\",\n    \"parallel_tool_calls\",\n    \"store\",\n    \"temperature\",\n    \"tool_choice\",\n    \"top_p\",\n    \"truncation\",\n    \"user\",\n  ];\n\n  const metadata: Record<string, unknown> = {};\n  const metadataKeys = [\n    \"reasoning\",\n    \"incomplete_details\",\n    \"instructions\",\n    \"previous_response_id\",\n    \"tools\",\n    \"metadata\",\n    \"status\",\n    \"error\",\n  ];\n\n  for (const key of modelParamKeys) {\n    const val = key in res ? (res[key as keyof typeof res] as string | number) : null;\n    if (val !== null && val !== undefined) {\n      modelParameters[key as keyof typeof modelParameters] = val;\n    }\n  }\n\n  for (const key of metadataKeys) {\n    const val = key in res ? (res[key as keyof typeof res] as string | number) : null;\n    if (val) {\n      metadata[key as keyof typeof metadata] = val;\n    }\n  }\n\n  return {\n    model,\n    modelParameters: Object.keys(modelParameters).length > 0 ? modelParameters : undefined,\n    metadata: Object.keys(metadata).length > 0 ? metadata : undefined,\n  };\n};\n","export const isAsyncIterable = (x: unknown): x is AsyncIterable<unknown> =>\n  x != null && typeof x === \"object\" && typeof (x as any)[Symbol.asyncIterator] === \"function\";\n","import type OpenAI from \"openai\";\n\nimport { type CreateLangfuseGenerationBody } from \"langfuse-core\";\n\nimport { LangfuseSingleton } from \"./LangfuseSingleton\";\nimport {\n  getToolCallOutput,\n  parseChunk,\n  parseCompletionOutput,\n  parseInputArgs,\n  parseUsage,\n  parseUsageDetails,\n  parseModelDataFromResponse,\n  parseUsageDetailsFromResponse,\n} from \"./parseOpenAI\";\nimport { isAsyncIterable } from \"./utils\";\nimport type { LangfuseConfig, LangfuseParent } from \"./types\";\n\ntype GenericMethod = (...args: unknown[]) => unknown;\n\nexport const withTracing = <T extends GenericMethod>(\n  tracedMethod: T,\n  config?: LangfuseConfig & Required<{ generationName: string }>\n): ((...args: Parameters<T>) => Promise<ReturnType<T>>) => {\n  return (...args) => wrapMethod(tracedMethod, config, ...args);\n};\n\nconst wrapMethod = <T extends GenericMethod>(\n  tracedMethod: T,\n  config?: LangfuseConfig,\n  ...args: Parameters<T>\n): ReturnType<T> | any => {\n  const { model, input, modelParameters } = parseInputArgs(args[0] ?? {});\n\n  const finalModelParams = { ...modelParameters, response_format: null };\n  const finalMetadata = {\n    ...config?.metadata,\n    response_format: \"response_format\" in modelParameters ? modelParameters.response_format : undefined,\n  };\n\n  let observationData = {\n    model,\n    input,\n    modelParameters: finalModelParams,\n    name: config?.generationName,\n    startTime: new Date(),\n    promptName: config?.langfusePrompt?.name,\n    promptVersion: config?.langfusePrompt?.version,\n    metadata: finalMetadata,\n  };\n\n  let langfuseParent: LangfuseParent;\n  const hasUserProvidedParent = config && \"parent\" in config;\n\n  if (hasUserProvidedParent) {\n    langfuseParent = config.parent;\n\n    // Remove the parent from the config to avoid circular references in the generation body\n    const filteredConfig = { ...config, parent: undefined };\n\n    observationData = {\n      ...filteredConfig,\n      ...observationData,\n      promptName: config?.promptName ?? config?.langfusePrompt?.name, // Maintain backward compatibility for users who use promptName\n      promptVersion: config?.promptVersion ?? config?.langfusePrompt?.version, // Maintain backward compatibility for users who use promptVersion\n    };\n  } else {\n    const langfuse = LangfuseSingleton.getInstance(config?.clientInitParams);\n    langfuseParent = langfuse.trace({\n      ...config,\n      ...observationData,\n      id: config?.traceId,\n      name: config?.traceName,\n      timestamp: observationData.startTime,\n    });\n  }\n\n  try {\n    const res = tracedMethod(...args);\n\n    // Handle stream responses\n    if (isAsyncIterable(res)) {\n      return wrapAsyncIterable(res, langfuseParent, hasUserProvidedParent, observationData);\n    }\n\n    if (res instanceof Promise) {\n      const wrappedPromise = res\n        .then((result) => {\n          if (isAsyncIterable(result)) {\n            return wrapAsyncIterable(result, langfuseParent, hasUserProvidedParent, observationData);\n          }\n\n          const output = parseCompletionOutput(result);\n          const usage = parseUsage(result);\n          const usageDetails = parseUsageDetailsFromResponse(result);\n          const {\n            model: modelFromResponse,\n            modelParameters: modelParametersFromResponse,\n            metadata: metadataFromResponse,\n          } = parseModelDataFromResponse(result);\n\n          langfuseParent.generation({\n            ...observationData,\n            output,\n            endTime: new Date(),\n            usage,\n            usageDetails,\n            model: modelFromResponse || observationData.model,\n            modelParameters: { ...observationData.modelParameters, ...modelParametersFromResponse },\n            metadata: { ...observationData.metadata, ...metadataFromResponse },\n          });\n\n          if (!hasUserProvidedParent) {\n            langfuseParent.update({ output });\n          }\n\n          return result;\n        })\n        .catch((err) => {\n          langfuseParent.generation({\n            ...observationData,\n            endTime: new Date(),\n            statusMessage: String(err),\n            level: \"ERROR\",\n            usage: {\n              inputCost: 0,\n              outputCost: 0,\n              totalCost: 0,\n            },\n            costDetails: {\n              input: 0,\n              output: 0,\n              total: 0,\n            },\n          });\n\n          throw err;\n        });\n\n      return wrappedPromise;\n    }\n\n    return res;\n  } catch (error) {\n    langfuseParent.generation({\n      ...observationData,\n      endTime: new Date(),\n      statusMessage: String(error),\n      level: \"ERROR\",\n      usage: {\n        inputCost: 0,\n        outputCost: 0,\n        totalCost: 0,\n      },\n      costDetails: {\n        input: 0,\n        output: 0,\n        total: 0,\n      },\n    });\n\n    throw error;\n  }\n};\n\nfunction wrapAsyncIterable<R>(\n  iterable: AsyncIterable<unknown>,\n  langfuseParent: LangfuseParent,\n  hasUserProvidedParent: boolean | undefined,\n  observationData: Record<string, any>\n): R {\n  async function* tracedOutputGenerator(): AsyncGenerator<unknown, void, unknown> {\n    const response = iterable;\n    const textChunks: string[] = [];\n    const toolCallChunks: OpenAI.Chat.Completions.ChatCompletionChunk.Choice.Delta.ToolCall[] = [];\n    let completionStartTime: Date | null = null;\n    let usage: OpenAI.CompletionUsage | null = null;\n    let usageDetails: CreateLangfuseGenerationBody[\"usageDetails\"] = undefined;\n    let output: CreateLangfuseGenerationBody[\"output\"] = null;\n\n    for await (const rawChunk of response as AsyncIterable<unknown>) {\n      completionStartTime = completionStartTime ?? new Date();\n\n      // Handle Response API chunks\n      if (typeof rawChunk === \"object\" && rawChunk && \"response\" in rawChunk) {\n        const result = rawChunk[\"response\"];\n        output = parseCompletionOutput(result);\n        usageDetails = parseUsageDetailsFromResponse(result);\n\n        const {\n          model: modelFromResponse,\n          modelParameters: modelParametersFromResponse,\n          metadata: metadataFromResponse,\n        } = parseModelDataFromResponse(result);\n\n        observationData[\"model\"] = modelFromResponse ?? observationData[\"model\"];\n        observationData[\"modelParameters\"] = { ...observationData.modelParameters, ...modelParametersFromResponse };\n        observationData[\"metadata\"] = { ...observationData.metadata, ...metadataFromResponse };\n      }\n\n      if (typeof rawChunk === \"object\" && rawChunk != null && \"usage\" in rawChunk) {\n        usage = rawChunk.usage as OpenAI.CompletionUsage | null;\n      }\n\n      const processedChunk = parseChunk(rawChunk);\n\n      if (!processedChunk.isToolCall) {\n        textChunks.push(processedChunk.data);\n      } else {\n        toolCallChunks.push(processedChunk.data);\n      }\n\n      yield rawChunk;\n    }\n\n    output = output ?? (toolCallChunks.length > 0 ? getToolCallOutput(toolCallChunks) : textChunks.join(\"\"));\n\n    langfuseParent.generation({\n      ...observationData,\n      output,\n      endTime: new Date(),\n      completionStartTime,\n      usage: usage\n        ? {\n            input: \"prompt_tokens\" in usage ? usage.prompt_tokens : undefined,\n            output: \"completion_tokens\" in usage ? usage.completion_tokens : undefined,\n            total: \"total_tokens\" in usage ? usage.total_tokens : undefined,\n          }\n        : undefined,\n      usageDetails: usageDetails ?? (usage ? parseUsageDetails(usage) : undefined),\n    });\n\n    if (!hasUserProvidedParent) {\n      langfuseParent.update({ output });\n    }\n  }\n\n  return tracedOutputGenerator() as R;\n}\n","import type { LangfuseCore } from \"langfuse-core\";\n\nimport { LangfuseSingleton } from \"./LangfuseSingleton\";\nimport { withTracing } from \"./traceMethod\";\nimport type { LangfuseConfig, LangfuseExtension } from \"./types\";\n\n/**\n * Wraps an OpenAI SDK object with Langfuse tracing. Function calls are extended with a tracer that logs detailed information about the call, including the method name,\n * input parameters, and output.\n * \n * @param {T} sdk - The OpenAI SDK object to be wrapped.\n * @param {LangfuseConfig} [langfuseConfig] - Optional configuration object for the wrapper.\n * @param {string} [langfuseConfig.traceName] - The name to use for tracing. If not provided, a default name based on the SDK's constructor name and the method name will be used.\n * @param {string} [langfuseConfig.sessionId] - Optional session ID for tracing.\n * @param {string} [langfuseConfig.userId] - Optional user ID for tracing.\n * @param {string} [langfuseConfig.release] - Optional release version for tracing.\n * @param {string} [langfuseConfig.version] - Optional version for tracing.\n * @param {string} [langfuseConfig.metadata] - Optional metadata for tracing.\n * @param {string} [langfuseConfig.tags] - Optional tags for tracing.\n * @returns {T} - A proxy of the original SDK object with methods wrapped for tracing.\n *\n * @example\n * const client = new OpenAI();\n * const res = observeOpenAI(client, { traceName: \"My.OpenAI.Chat.Trace\" }).chat.completions.create({\n *      messages: [{ role: \"system\", content: \"Say this is a test!\" }],\n        model: \"gpt-3.5-turbo\",\n        user: \"langfuse\",\n        max_tokens: 300\n * });\n * */\nexport const observeOpenAI = <SDKType extends object>(\n  sdk: SDKType,\n  langfuseConfig?: LangfuseConfig\n): SDKType & LangfuseExtension => {\n  return new Proxy(sdk, {\n    get(wrappedSdk, propKey, proxy) {\n      const originalProperty = wrappedSdk[propKey as keyof SDKType];\n\n      const defaultGenerationName = `${sdk.constructor?.name}.${propKey.toString()}`;\n      const generationName = langfuseConfig?.generationName ?? defaultGenerationName;\n      const traceName = langfuseConfig && \"traceName\" in langfuseConfig ? langfuseConfig.traceName : generationName;\n      const config = { ...langfuseConfig, generationName, traceName };\n\n      // Add a flushAsync method to the OpenAI SDK that flushes the Langfuse client\n      if (propKey === \"flushAsync\") {\n        let langfuseClient: LangfuseCore;\n\n        // Flush the correct client depending on whether a parent client is provided\n        if (langfuseConfig && \"parent\" in langfuseConfig) {\n          langfuseClient = langfuseConfig.parent.client;\n        } else {\n          langfuseClient = LangfuseSingleton.getInstance();\n        }\n\n        return langfuseClient.flushAsync.bind(langfuseClient);\n      }\n\n      // Add a shutdownAsync method to the OpenAI SDK that flushes the Langfuse client\n      if (propKey === \"shutdownAsync\") {\n        let langfuseClient: LangfuseCore;\n\n        // Flush the correct client depending on whether a parent client is provided\n        if (langfuseConfig && \"parent\" in langfuseConfig) {\n          langfuseClient = langfuseConfig.parent.client;\n        } else {\n          langfuseClient = LangfuseSingleton.getInstance();\n        }\n\n        return langfuseClient.shutdownAsync.bind(langfuseClient);\n      }\n\n      // Trace methods of the OpenAI SDK\n      if (typeof originalProperty === \"function\") {\n        return withTracing(originalProperty.bind(wrappedSdk), config);\n      }\n\n      const isNestedOpenAIObject =\n        originalProperty &&\n        !Array.isArray(originalProperty) &&\n        !(originalProperty instanceof Date) &&\n        typeof originalProperty === \"object\";\n\n      // Recursively wrap nested objects to ensure all nested properties or methods are also traced\n      if (isNestedOpenAIObject) {\n        return observeOpenAI(originalProperty, config);\n      }\n\n      // Fallback to returning the original value\n      return Reflect.get(wrappedSdk, propKey, proxy);\n    },\n  }) as SDKType & LangfuseExtension;\n};\n"],"names":["cookieStore","getItem","key","nameEQ","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","decodeURIComponent","err","setItem","value","cdomain","expires","secure","new_cookie_val","encodeURIComponent","removeItem","name","clear","getAllKeys","keys","push","createStorageLike","store","localStorage","checkStoreIsSupported","storage","window","val","localStore","undefined","sessionStore","createMemoryStorage","_cache","getStorage","type","_localStore","_sessionStore","sessionStorage","ContentType","HttpClient","constructor","apiConfig","baseUrl","securityData","abortControllers","Map","customFetch","fetchParams","fetch","baseApiParams","credentials","headers","redirect","referrerPolicy","setSecurityData","data","contentFormatters","Json","input","JSON","stringify","Text","FormData","Object","reduce","formData","property","append","Blob","UrlEncoded","toQueryString","createAbortSignal","cancelToken","has","abortController","get","signal","AbortController","set","abortRequest","abort","delete","request","body","path","query","format","params","secureParams","securityWorker","requestParams","mergeRequestParams","queryString","payloadFormatter","responseFormat","then","response","r","clone","error","ok","catch","e","assign","encodeQueryParam","encodedKey","addQueryParam","addArrayQueryParam","map","v","join","rawQuery","filter","Array","isArray","addQueryParams","params1","params2","LangfusePublicApi","api","annotationQueuesCreateQueueItem","queueId","method","annotationQueuesDeleteQueueItem","itemId","annotationQueuesGetQueue","annotationQueuesGetQueueItem","annotationQueuesListQueueItems","annotationQueuesListQueues","annotationQueuesUpdateQueueItem","commentsCreate","commentsGet","commentsGetById","commentId","datasetItemsCreate","datasetItemsDelete","id","datasetItemsGet","datasetItemsList","datasetRunItemsCreate","datasetRunItemsList","datasetsCreate","datasetsDeleteRun","datasetName","runName","datasetsGet","datasetsGetRun","datasetsGetRuns","datasetsList","healthHealth","ingestionBatch","mediaGet","mediaId","mediaGetUploadUrl","mediaPatch","metricsMetrics","modelsCreate","modelsDelete","modelsGet","modelsList","observationsGet","observationId","observationsGetMany","organizationsGetOrganizationMemberships","organizationsGetOrganizationProjects","organizationsGetProjectMemberships","projectId","organizationsUpdateOrganizationMembership","organizationsUpdateProjectMembership","projectsCreate","projectsCreateApiKey","projectsDelete","projectsDeleteApiKey","apiKeyId","projectsGet","projectsGetApiKeys","projectsUpdate","promptsCreate","promptsGet","promptName","promptsList","promptVersionUpdate","version","scimCreateUser","scimDeleteUser","userId","scimGetResourceTypes","scimGetSchemas","scimGetServiceProviderConfig","scimGetUser","scimListUsers","scoreConfigsCreate","scoreConfigsGet","scoreConfigsGetById","configId","scoreCreate","scoreDelete","scoreId","scoreV2Get","scoreV2GetById","sessionsGet","sessionId","sessionsList","traceDelete","traceId","traceDeleteMultiple","traceGet","traceList","Langfuse","LangfuseCore","langfuseConfig","utils","configLangfuseSDK","_storageKey","persistence_name","publicKey","_storage","persistence","getLibraryVersion","getLibraryId","sdkIntegration","additionalHeaders","constructAuthorizationHeader","secretKey","getPersistedProperty","_storageCache","parse","setPersistedProperty","url","options","getCustomUserAgent","LangfuseWeb","LangfuseWebStateless","LangfuseSingleton","getInstance","instance","parseInputArgs","args","frequency_penalty","logit_bias","logprobs","max_tokens","n","presence_penalty","seed","stop","stream","temperature","top_p","user","response_format","top_logprobs","messages","function_call","functions","tools","tool_choice","prompt","model","modelParameters","parseCompletionOutput","res","output","choices","message","text","parseUsage","hasCompletionUsage","prompt_tokens","completion_tokens","total_tokens","usage","total","parseUsageDetails","completionUsage","completion_tokens_details","prompt_tokens_details","fromEntries","entries","input_tokens","output_tokens","input_tokens_details","output_tokens_details","parseUsageDetailsFromResponse","parseChunk","rawChunk","isToolCall","_chunk","chunkData","delta","tool_calls","content","obj","getToolCallOutput","toolCallChunks","toolArguments","toolCall","function","arguments","parseModelDataFromResponse","metadata","modelParamKeys","metadataKeys","isAsyncIterable","x","Symbol","asyncIterator","withTracing","tracedMethod","config","wrapMethod","finalModelParams","finalMetadata","observationData","generationName","startTime","Date","langfusePrompt","promptVersion","langfuseParent","hasUserProvidedParent","parent","filteredConfig","langfuse","clientInitParams","trace","traceName","timestamp","wrapAsyncIterable","Promise","wrappedPromise","result","usageDetails","modelFromResponse","modelParametersFromResponse","metadataFromResponse","generation","endTime","update","statusMessage","String","level","inputCost","outputCost","totalCost","costDetails","iterable","tracedOutputGenerator","textChunks","completionStartTime","processedChunk","observeOpenAI","sdk","Proxy","wrappedSdk","propKey","proxy","originalProperty","defaultGenerationName","toString","langfuseClient","client","flushAsync","bind","shutdownAsync","isNestedOpenAIObject","Reflect"],"mappings":"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"}